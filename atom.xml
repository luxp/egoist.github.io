<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>庶民样本</title>
  <subtitle>An artist who lives in his fields</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://egoist.moe/"/>
  <updated>2017-09-15T15:30:22.000Z</updated>
  <id>https://egoist.moe/</id>
  
  <author>
    <name>EGOIST</name>
    <email>0x142857@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 canvas 画一个聊天消息</title>
    <link href="https://egoist.moe/2017/09/15/draw-chat-message-with-canvas/"/>
    <id>https://egoist.moe/2017/09/15/draw-chat-message-with-canvas/</id>
    <published>2017-09-15T13:58:02.000Z</published>
    <updated>2017-09-15T15:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>我不是个太求上进的人，对大多数事物都是浅尝辄止，喜欢卖弄自己一些一知半解的技巧。</p>
<p>对于 canvas 我不甚了解，因为自己平时没有能用到的地方（毕竟这在我的舒适区之外）。今天我对一个感兴趣已久的表情包再度萌生了兴趣，比如其中一个：</p>
<img src="https://i.loli.net/2017/09/15/59bbde6f0df7c.jpeg" alt="sticker" width="300">
<p><em><a href="https://t.me/addstickers/MadeInBitinn" target="_blank" rel="external">source: https://t.me/addstickers/MadeInBitinn</a></em></p>
<p>于是想用 canvas 自动从用户输入的内容中生成一个，虽然我基本没用过 canvas 不过基于以前做 <a href="https://egoist.moe/slogan/">slogan</a> 的经验我还是开始了。</p>
<p>首先得新建一个 canvas 元素我还是记得的，然后获取它的 2d context:</p>
<pre><code class="language-js">const $canvas = document.getElementById('canvas')
const ctx = $canvas.getContext('2d')
</code></pre>
<p>然后开始渲染，对于左边的头像我是暂时忽略的，毕竟我不记得怎么渲染图片了，于是先从其它的文字开始吧，我需要渲染一个用户名和右边的日期:</p>
<pre><code class="language-js">// 其实我也不记得怎么渲染文字了
// Google 了一下发现是 ctx.fillText(text, x, y)
ctx.fillText('EGOIST', 50, 10)
// 我给左边头像预留 50 宽度
</code></pre>
<p>它的效果是:</p>
<p><img src="https://i.loli.net/2017/09/15/59bbe0f394e51.png" alt="p1"></p>
<p>原图里的用户名好像是蓝色加粗未知字体，那我也搜搜改颜色和字体的 API 吧:</p>
<pre><code class="language-js">ctx.font = 'bold 14px sans-serif'
ctx.fillStyle = 'blue'
</code></pre>
<p><img src="https://i.loli.net/2017/09/15/59bbe259e6618.png" alt="p2"></p>
<p>如图我是在 <code>fillText</code> 之前设置的 <code>font</code> 和 <code>fillStyle</code>，原因很明显。</p>
<hr>
<p>接下来要在右边渲染日期，我需要知道用户名的宽度，而我清楚地记得可以用 <code>ctx.measureText</code> 获取:</p>
<pre><code class="language-js">const usernameWidth = ctx.measureText('EGOIST').width
// 重新设置字体和颜色不然会和用户名一样
ctx.font = '14px sans-serif'
ctx.fillStyle = '#666'
// 时间的 `x` 是用户名宽度 + 预留头像的宽度 + 时间到用户名的距离
ctx.fillText('2017/7/7', usernameWidth + 50 + 10, 15)
</code></pre>
<p><img src="https://i.loli.net/2017/09/15/59bbe4404645e.png" alt="p3"></p>
<hr>
<p>接下来是消息的主体内容，它可能是多行的而 canvas 无法自动换行，我们需要根据换行符 <code>\n</code> 手动识别:</p>
<pre><code class="language-js">const content = `hello world
goodbye world`

content.split('\n').forEach((text, index) =&gt; {
  ctx.fillText(
    text, 
    // 预留头像的宽度
    50,
    // content 距离用户名的距离 + 每一行的大概高度
    30 + 15 * index
  )
})
</code></pre>
<p><img src="https://i.loli.net/2017/09/15/59bbe6a3a24df.png" alt="p4"></p>
<hr>
<p>最后只剩下头像了。我知道需要一个 <code>input</code> 元素来获取图片文件，然后以某种方式让 <code>ctx</code> 能够渲染它:</p>
<pre><code class="language-html">&lt;input type=&quot;file&quot; id=&quot;avatar&quot;&gt;
</code></pre>
<pre><code class="language-js">document.getElementById('avatar').addEventListener('change', e =&gt; {
  draw(e.target.files[0])
})

// 下面的内容基本是从 StackOverflow 复制的
function draw(avatar) {
  // 画头像
  const img = new Image()
  img.onload = () =&gt; {
    // 头像实际宽度 40
    // 剩下 10px 是到右边的边距
    ctx.drawImage(img, 0, 5, 40, 40)
  }
  img.src = URL.createObjectURL(avatar)

  // ... 画其它东西
}
</code></pre>
<p><img src="https://i.loli.net/2017/09/15/59bbe9cc75c16.gif" alt="p5"></p>
<hr>
<p>完成的代码见: <a href="https://codepan.net/gist/6630c3910af4495ad06be5426db6c3f8" target="_blank" rel="external">https://codepan.net/gist/6630c3910af4495ad06be5426db6c3f8</a><br>
用 Vue 写的原始版本见: <a href="https://codepan.net/gist/a4d31a6dc1ac7517bd5d80dc62af1930" target="_blank" rel="external">https://codepan.net/gist/a4d31a6dc1ac7517bd5d80dc62af1930</a></p>
<h2 id="后日谈">后日谈</h2>
<p>这里的代码可能有问题的就是文字高度的获取方式，比如 <code>content</code> 每一行我是目测的 <code>15px</code>，这里肯定会出一些偏差，似乎也可以近似地把每一行的高度看成约等于 <code>ctx.measureText('M').width</code>，不过不知道中文是否会差的太多，应该会有更好且更优雅的方案吧。我擅长浅尝辄止，这里就不想追问了。</p>
<p>写这篇文章的主要目的是秀出我愚蠢的写代码的方式供后人凭吊且让各位读者获取代码上的自信，你可能比我要好得多。</p>
<img src="https://i.loli.net/2017/09/15/59bbece2a54ab.png" alt="lol" width="300">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不是个太求上进的人，对大多数事物都是浅尝辄止，喜欢卖弄自己一些一知半解的技巧。&lt;/p&gt;
&lt;p&gt;对于 canvas 我不甚了解，因为自己平时没有能用到的地方（毕竟这在我的舒适区之外）。今天我对一个感兴趣已久的表情包再度萌生了兴趣，比如其中一个：&lt;/p&gt;
&lt;img src=&quot;
    
    </summary>
    
    
      <category term="javascript" scheme="https://egoist.moe/tags/javascript/"/>
    
      <category term="canvas" scheme="https://egoist.moe/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Bili: 打包 JS 库的瑞士军刀</title>
    <link href="https://egoist.moe/2017/07/08/bili/"/>
    <id>https://egoist.moe/2017/07/08/bili/</id>
    <published>2017-07-08T07:13:17.000Z</published>
    <updated>2017-07-08T09:37:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预习">预习</h2>
<h3 id="rollup">Rollup</h3>
<p><a href="https://github.com/rollup/rollup" target="_blank" rel="external">Rollup</a> 类似 <a href="https://webpack.js.org" target="_blank" rel="external">Webpack</a>/Browserify 之类的打包工具，但是打包出来的文件更小，即便是和 Webpack 3 相比。除此之外 Rollup 主要用于打包 library 并且拥有非常简单的 API 接口。</p>
<h3 id="瑞士军刀">瑞士军刀</h3>
<p>多种用途，携带方便且操作简单，意外地看起来很酷。</p>
<h2 id="授业">授业</h2>
<blockquote>
<p>学生 A：道理我都懂，可是 EGOIST sensei<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>! 为什么给 Rollup 套个皮就拿出来卖了？这根本不是编程！</p>
</blockquote>
<p>的确这不是什么有难度、有深度的东西，只是用来解决一个简单的问题：简化打包流程，提高人类自身价值感和归属感。</p>
<blockquote>
<p>学生 B：哦？是怎么做到的呢，想知道呢！sensei sensei 快告诉我！</p>
</blockquote>
<p>既然这个同学可爱地向我提问了那我就简明易懂地告诉大家吧！你可以在 <a href="https://github.com/rollup/rollup/wiki/JavaScript-API" target="_blank" rel="external">WIKI</a> 找到 Rollup 的 API 食用方法，简单地说它接受一个参数，而这个参数决定了如何寻找、操作你的源代码，比如:</p>
<pre><code class="language-js">rollup.rollup({
  // 从这个文件开始:
  entry: 'src/index.js',
  // 用写插件自定义如何转换代码吧
  plugins: []
})
</code></pre>
<p>然后它会返回一个 Promise 把 <code>bundle</code> 送到你手上，你可以决定如何生成文件:</p>
<pre><code class="language-js">rollup.rollup(options)
  .then(bundle =&gt; {
    // 我想写到磁盘上！
    bundle.write({
      // 等等 Rollup 娘，写成 commonjs 格式的哦！
      format: 'cjs',
      // 给生成的文件一个名字吧！
      dest: 'bundle.js'
    })
  })
</code></pre>
<blockquote>
<p>学生 C 跳了起来: EGOIST sensei! 这看上去好简单啊，根本没你的 <a href="https://github.com/egoist/bili" target="_blank" rel="external">Bili</a> 的出场机会了啊 QAQ</p>
</blockquote>
<p>的确很简单，但是你可以看看 <a href="https://github.com/vuejs/vue/blob/dev/build/build.js" target="_blank" rel="external">Vue</a> 和 <a href="https://github.com/facebook/react/blob/master/scripts/rollup/build.js" target="_blank" rel="external">React</a> 的构建脚本，真是无比地冗长。</p>
<p>越 low level 的 API 看起来就越简单，但在大项目中就会被有经验的开发者用更复杂的方式来使用，人们称这种情况为 <strong>M 属性</strong>，不过这已经在这节课的范畴之外了。</p>
<p>简而言之，大多数项目都会有生成多个 bundle 的需求，比如不同格式的 bundle、抑或替换了不同变量的 bundle，你势必将多次使用 Rollup <strong>简单</strong>的 API 来解决这些需求。而将这一行为抽离出来，放进一个单独的工具中以便重复使用，便是 Bili 干的事:</p>
<pre><code class="language-bash">bili --format cjs,umd,es --compress umd
</code></pre>
<p>为了能尽可能直接用命令行就可以使用 Bili 的全部功能，<code>format</code> 接受以逗号分割的一个或多个格式名，当然数组也可以不过命令行里不太方便。</p>
<p>让我们来看看使用原汁原味的 Rollup 来写看起来是什么样子:</p>
<pre><code class="language-js">import { rollup } from 'rollup'

function build(format) {
  const plugins = [
    // ES2015 -&gt; ES5
    require('rollup-plugin-buble')()
  ]

  let compress = false

  if (format.endsWith('Compress')) {
    format = format.replace(/Compress$/, '')
    compress = true
  }

  if (format === 'umd') {
    // 把第三方模块打包进来
    plugins.push(
      require('rollup-plugin-node-resolve')(),
      require('rollup-plugin-commonjs')()
    )
  }

  if (compress) {
    // 压缩
    plugins.push(require('rollup-plugin-uglifyjs')())
  }

  return rollup({
    entry: 'src/index.js',
    plugins
  }).then(bundle =&gt; bundle.write({
    dest: `dist/index.${format}.js`,
    format
  }))
}

Promise.all(['umd', 'cjs', 'es', 'umdCompress'].map(build))
  .then(() =&gt; console.log('done'))
  .catch(err =&gt; console.error(err))
</code></pre>
<p>就是以上这样的感觉，Bili 最近被中国超高校级的计算机协会授予了节能减排倡导先锋和键盘寿命拯救者的光荣称号，以及还有人类脑细胞的救星、键盘手杀手、让正太和萝莉也很容易地打包了这些市井称号。</p>
<p><a href="https://github.com/search?l=JSON&amp;o=desc&amp;q=bili+scripts+build&amp;s=indexed&amp;type=Code&amp;utf8=%E2%9C%93" target="_blank" rel="external">Bili 被大量使用在我的前端库中</a>，有人会问那 CSS 以及图片、字体什么的怎么办，对于 CSS 我一般不会打包，直接原样交给用户。而字体、图片什么的一般也都是 CSS 里用的，自然同理。当然，我暂时还没有遇到需要字体和图片的情况。</p>
<h2 id="放课后">放课后</h2>
<p>放学后同学们都会到家跃跃欲试，打开电脑，发现了 <a href="https://github.com/egoist/bili" target="_blank" rel="external">Bili</a> <a href="https://github.com/egoist/bili/releases/tag/v0.17.0" target="_blank" rel="external">v0.17</a> 的数个 breaking changes，当然都是花一分钟就能搞定的变更。</p>
<p>从此，大家过上了幸福的打包生活。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>日语中老师(センセイ)的意思，由女高中生说出来时才可充分表现语言的张力。 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;预习&quot;&gt;预习&lt;/h2&gt;
&lt;h3 id=&quot;rollup&quot;&gt;Rollup&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rollup/rollup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rollup&lt;/a&gt; 类似 &lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新世纪福音脚手架</title>
    <link href="https://egoist.moe/2017/05/21/neon-genesis-scaffolding-tool/"/>
    <id>https://egoist.moe/2017/05/21/neon-genesis-scaffolding-tool/</id>
    <published>2017-05-21T12:20:34.000Z</published>
    <updated>2017-05-21T16:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>好的作品不在于其形式，重要的是内容，我的很多音乐作品都是没有名字的，然而没有名字的东西无法商业流通，所以你才会看到我那些没有特殊意义、单纯靠滚键盘得到的名字。 —— <a href="http://music.163.com/#/artist?id=15290" target="_blank" rel="external">泽野弘之</a>曾经这样说过(其实并没有)。</p>
<p>这篇文章也是这个道理，想介绍一下我在半年前开始做的脚手架工具。给文章起标题也是一件很困难的事，最开始想到的是「史上最优雅的脚手架工具」、「来自未来的脚手架」，不过这些未免显得太标题党了，华而不实我自己都很尴尬。最近我刚好做了个<a href="https://github.com/egoist/evangelion-card" target="_blank" rel="external">新世纪福音战士标题卡生成器</a>，于是就随机将几个关键词组合在一起 —— <strong>新世纪福音脚手架</strong>，意外地显得还不错。</p>
<p><img src="https://ooo.0o0.ooo/2017/05/21/5921898822cae.png" alt="sao"></p>
<p><strong>为了不让你对标题不明所以，简单地说明了它的来历，以下才是正文。</strong></p>
<h2 id="脚手架">脚手架</h2>
<p>经常造轮子就会发现脚手架的重要性，这也是为什么 Yeoman 的发明者之一是 <a href="https://github.com/sindresorhus" target="_blank" rel="external">@sindresorhus</a> 的原因。后者已经在 npm 上发布了<a href="https://www.npmjs.com/~sindresorhus" target="_blank" rel="external">超过 1000 个模块</a>，很难后有来者了。</p>
<p>Yeoman 十分健壮，生态繁荣，然而要写<a href="https://github.com/sindresorhus/generator-nm/blob/master/app/index.js" target="_blank" rel="external">一个 generator 的复杂度</a>和写普通的代码几乎是差不多的，而我在能尽可能减少思考的时候就想减少思考，vue-cli 的思路很好地解决了我想减少思考的诉求，一个 generator 中间生成文件的过程有很多步骤是可以自动解决的。</p>
<p>vue-cli 虽然名字里有 vue 属性，但是作为任意类型项目的脚手架工具都是可以的，尽管运行 <code>vue init react</code> 这样的命令会显得有些奇怪。这也是为什么我做了 <a href="https://github.com/egoist/sao" target="_blank" rel="external">SAO</a> 的原因，一个类似 vue-cli 的脚手架工具。在拥有 vue-cli 的功能的同时，它也能像 Yeoman 一样用 npm package 作为模板并支持测试。</p>
<p>举个例子，在运行 <code>sao vue</code> 的时候，如果 template-vue 这个 npm 模块没有全局安装，它会提示你安装，之后再使用模板根目录里的配置文件 <code>sao.js</code> 将同目录里的 <code>template/</code> 中的文件生成到 <code>process.cwd()</code> 即当前目录。如果不存在配置文件，那么只会当成一个普通的目录，简单地复制粘贴到当前目录。</p>
<p>📄 <strong>template-vue/sao.js:</strong></p>
<pre><code class="language-js">module.exports = {
  // 从用户获取一些信息
  prompts: {
    pwa: {
      type: 'confirm',
      message: 'Add Progressive Web App support',
      default: true
    }
  },
  // 如果要发布到 npm
  // .gitignore 会自动被 npm 更名为 .npmignore
  // 为了避免这种情况需要起个另外的名字
  // 然后在生成的时候改名为 .gitignore
  move: {
    gitignore: '.gitignore'
  },
  // 只在用户确认了 pwa 选项的时候生成 pwa.js
  filters: {
    'pwa.js': 'pwa'
  }
}
</code></pre>
<p>上面的这个配置文件满足了大部分脚手架的需求，即从用户获取信息 --&gt; 根据此信息生成需要的文件。而且几乎与代码无关，这个配置文件完全是由<strong>数据</strong>组成的，只不过刚好是以 JS 对象的格式。</p>
<p><img src="https://ooo.0o0.ooo/2017/05/21/59218de93485b.png" alt="preview"></p>
<p>SAO 接收的第一个参数可以是:</p>
<ul>
<li>本地模板路径，比如 <code>./my-template</code> <code>/path/to/my-template</code>。</li>
<li>GitHub 项目缩略名，比如 <code>egoist/template-vue</code>。</li>
<li>npm 模块名(自动加上 <code>template-</code> 前缀)，比如 <code>vue</code> 将会使用 npm 上的 <code>template-vue</code> 这个包。</li>
</ul>
<p>而第二个参数是可选的，不存在时将会生成文件到工作区目录（当前目录），否则将会生成到指定的文件夹中。</p>
<h2 id="测试脚手架">测试脚手架</h2>
<p>当脚手架变得复杂，你需要系统地测试以便让其在各种情况下都能生成正确的文件。对于一个脚手架，能从用户影响到它的变量只有 <code>prompts</code> 这个参数，也就是从用户获取的信息。而 SAO 的测试也主要是围绕这个来的，你可以模拟用户输入来检测生成结果。</p>
<p>📄 <strong>template-vue/test.js:</strong></p>
<pre><code class="language-js">import test from 'ava'
import sao from 'sao'

test('generate pwa entry', async t =&gt; {
  const template = process.cwd() // 模板根目录
  const res = await sao.mockPrompt(template, {
    // 模拟的 prompts 数据
    // 默认使用 `prompts` 中的默认值
    // 在上面的 `sao.js` 中 `pwa` 默认为 `true`
  })
  t.true(res.fileList.includes('pwa.js'))
})

test('ignore pwa entry', async t =&gt; {
  const template = process.cwd() // 模板根目录
  const res = await sao.mockPrompt(template, {
    pwa: false
  })
  t.false(res.fileList.includes('pwa.js'))
})
</code></pre>
<p>这里的 <code>res.fileList</code> 是生成的文件列表，形如:</p>
<pre><code class="language-js">[
  '.gitignore',
  'pwa.js',
  'src/index.js'
]
</code></pre>
<p>以及 <code>res.files</code>，包含了生成文件的信息:</p>
<pre><code class="language-js">{
  '.gitignore': {
    contents: Buffer,
    stats: {}, // fs.Stats,
    path: '/absolute/path/to/this/file'
  },
  // ...
}
</code></pre>
<h2 id="最后">最后</h2>
<p>分享几个我自己经常使用的模板:</p>
<ul>
<li><a href="https://github.com/egoist/template-nm" target="_blank" rel="external">template-nm</a>: 生成一个 npm 模块，我的所有模块都是用这个生成的。</li>
<li><a href="https://github.com/egoist/template-vue" target="_blank" rel="external">template-vue</a>: 生成一个<em>几乎</em>无需配置的 Vue 项目，基于 <a href="https://poi.js.org" target="_blank" rel="external">Poi</a>。</li>
<li><a href="https://github.com/egoist/awesome-sao" target="_blank" rel="external">awesome-sao</a>: 相关 SAO 资源。</li>
</ul>
<p>关于更多 SAO 的使用方法和配置文件参数，可以访问 <a href="https://sao.js.org" target="_blank" rel="external">https://sao.js.org</a> :P 虽然本文标题是来源于新世纪福音战士，但 SAO 显然是来源于 <a href="https://zh.moegirl.org/zh-hans/%E5%88%80%E5%89%91%E7%A5%9E%E5%9F%9F" target="_blank" rel="external">Sword Art Online</a> 的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好的作品不在于其形式，重要的是内容，我的很多音乐作品都是没有名字的，然而没有名字的东西无法商业流通，所以你才会看到我那些没有特殊意义、单纯靠滚键盘得到的名字。 —— &lt;a href=&quot;http://music.163.com/#/artist?id=15290&quot; targe
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5·12 那天我在做什么</title>
    <link href="https://egoist.moe/2017/05/12/5-12-memory/"/>
    <id>https://egoist.moe/2017/05/12/5-12-memory/</id>
    <published>2017-05-12T12:44:40.000Z</published>
    <updated>2017-05-12T15:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于很久以前的事情，比如我在干什么、我在想什么，我的记忆都很模糊，这是滥用男性特殊能力的必然结果。</p>
<p>不过九年前的那一天很特殊，当时我还是个初中二年级的学生，也就是处于字面意义上的「中二」阶段。那时的我似乎处于人生中如日中天的时期，学习上常年是年级前四，而在学校的某次活动上竟然有女生向我表白，这是现在的我万万不敢想的，她完全不了解我，只知道我成绩好就来表示自己的心意。而那天的我也很奇怪，中午吃过午饭我便一个人跑到了顶楼走廊上，倚着栏杆望向远方，能感受到的只有骄阳投射到我身上的温暖。之后便得出了我喜欢夏天这个结论，毕竟这可以让我享受到一个人如此惬意的时光，那个时候的我是一个拥有得不多但却十分知足的自诩「人生赢家」。</p>
<p>可是人类无论多么奇怪的行为都一定是有原因的啊，我也不例外。顺着记忆我发现了一些蛛丝马迹 —— 从楼顶下来我回到教室开始午睡了，走向我的座位前我势必要经过她的座位。原来是这样啊，原来青春期的我已经开始这种单恋了，在她面前经过，被注意到一下就能高兴一整天。</p>
<p>那个时候的我最喜欢的就是考试，因为这是唯一一种不能正确评判学生价值的方式，我靠着它取得了一些骄人的成绩，我那时喜欢看那些被判定为「没有价值」的同学的表情。而下午一开始便是生物课，正好也是月考，我知道又该涨潮了。之后的考试进行得很顺利，我飞速地挥动着笔想早早结束然后悠闲地在座位上观察别人答题的样子。我想玩点新鲜的，于是尝试将板凳立起来只靠后面两条板凳腿支撑这样坐着，随即产生了类似噗通抑或咔哒的动静，甚至隐约感到了从墙壁中传来的振动。「一定是附近工地在修房子，哗啦哗啦地将一片平房推倒的那种」，这样的事我在我家附近经常见到，产生这样的联想感觉没有毛病。可是不给我更多的思考时间，连课桌、给我们辛勤服务的吊扇、我踢球打碎过的玻璃、以及那个一脸生无可恋的生物老师都跳了起来！</p>
<p>「快跑！朱JJ！」</p>
<p>这是生物老师发出的略带回音的喊声，她是在呼唤她那一米八的儿子，似乎就坐在我附近。而我不知是哪里的脑筋接到了脚上，抓起试卷就往外跑！跑到门口的时候我已经感觉不到教室里乱动的东西了，因为整栋楼都抖了起来，如果不是发生在我身边的事，只是作为用于娱乐的灾难片的话我会给出好评并撰写影评 ——「真实地让我感觉想吐」，然后推荐给其他人观看。可惜不是这样的，我第一次看到快被挤垮的楼道的样子，跑到楼下我回头看了看顶楼，很难相信我几个小时前还在那里歌颂人生，而现在我连妹子都没来得及看就匆匆穿行于人海。</p>
<p>到了操场后，感觉到应该安全了我便掏出试卷向周围的同学炫耀我的精神，同时也顺利地掩饰了慌不择路的尴尬。操场上得有七百来号人，大概是为数不多全校师生共聚一堂的机会，初三的小哥哥小姐姐们因为某些原因不会浪费时间到操场这个强健体魄的地方来。之后通过口口相传，我得知了学校要求我们在操场上边休息边等自己的家长来接回家。</p>
<p>而当时我没有手机，天知道我该怎么联系家长。</p>
<p>当时的我没有手机，当然更没有电脑，我甚至没有 QQ 号。我知道地震了，可是除此之外什么都不知道，我想应该不只是我的学校地震了，这我还是知道的。我很累，把七百人等到四百人的时候我想起了我有个打发时间的秘诀忘了用，于是便邀了一个死党跑着前去小便，在经过她身旁的时候做了个踩单车的动作想引起一些注意，可是效果我就不得而知了。</p>
<p>在重复了几次类似的行为后我似乎更累了，开始在内心痛骂这些老师，不该做什么狗屁的规定要等到家长来接才能走，我也开始后悔自己的行为，大概之前的行为会被她当做神经病。之后感觉天上的火烧云都要烧到地上了班主任才说「走吧同学们，已经晚了自己回家小心哦」，谢天谢地，而且也得知了复课时间等具体通知的好消息。</p>
<p>我那个时候喜欢观察身边的一切，总觉得那天的天气挺不对劲，用我的话说就是天上是红色的却阴沉得厉害，还有一股妖风，走在回家的路上感觉大家都异常亢奋，我也不例外，一路小跑想回家看看电视想知道到底发生了什么。我家其实也就是我爸妈开的店，我和爸妈一起住在店里，一到家我看到他们将一些东西拖了出来摆到大街上，似乎是在预防些什么，之后吸引到我的就是一件方便面和一箱矿泉水，我从没在家里看到过以「件」出现的这两样东西，我很开心。</p>
<p>可是我万万没想到接下来的一周要以方便面度日而且发生了更恐怖的事情。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于很久以前的事情，比如我在干什么、我在想什么，我的记忆都很模糊，这是滥用男性特殊能力的必然结果。&lt;/p&gt;
&lt;p&gt;不过九年前的那一天很特殊，当时我还是个初中二年级的学生，也就是处于字面意义上的「中二」阶段。那时的我似乎处于人生中如日中天的时期，学习上常年是年级前四，而在学校
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>世界真喧扰</title>
    <link href="https://egoist.moe/2017/05/04/the-world-is-a-big-noise/"/>
    <id>https://egoist.moe/2017/05/04/the-world-is-a-big-noise/</id>
    <published>2017-05-04T05:57:06.000Z</published>
    <updated>2017-05-04T10:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>多说话让你有活着的实感，甚至还能调动你的神经，使你更为神采奕奕。</p>
<p>然而说出的不同的内容给自己和别人带来的影响也是不同的，比如有些人喜欢通过说话来贬低别人从而抬升自己，还有人希望用自己的一己之见混淆视听，这些都不是什么好的行径。</p>
<p>有些人说出的话其实是不经过大脑的，没有调查取证，没有任何思考的痕迹。前几日 Vue 娱乐圈又在知乎上<a href="https://www.zhihu.com/question/59039141" target="_blank" rel="external">炸开了锅</a>，之所以称之为娱乐圈完全不是贬低 Vue，而是很多国人喜欢把 Vue 往自己身上贴，让其沾染上自己的逗逼气质。不然为何他们不去搅和一下 React 娱乐圈和 Angular 娱乐圈呢，因为它们的作者大概根本不会鸟这些人。尤小右的国人属性让这些人觉得自己也可能是「被选中的那一个」。这些人之中也产生了一些怪诞的想法：</p>
<blockquote>
<p>@vayne: 尤是生意人，已经是个商人了，不必和他说技术</p>
</blockquote>
<p>我哪天哪根筋不对也可能去黑一下尤小右，不过万万不会用这种勾当，完全是对自己接受的数十年教育成果的否定。尤小右去年在 GitHub 贡献的提交量约为 6000，而且几乎是流行的产生了很大价值的项目，不像我那些仅仅是用来改善心情的小玩具。所以在深思熟虑后我觉得技术这个方面应该没有什么问题。再说生意人，我想这个结论大概是七大罪之一的嫉妒吧，你写代码赚 star 可以但是靠它赚了这么多钱就不对了，不过是又一个前端框架，为什么你在 <a href="https://www.patreon.com/evanyou" target="_blank" rel="external">patreon</a> 上有如此多的支持者？靠这种半自愿的赞助就月入一万刀？我也是中国人啊，上帝一定是收了你一瓶 82 年的雪莉酒才这么照顾你的。这种心情我可以体会，以前高中的时候我是个学渣，每次看到学霸考高分的时候我也是同样的心情，那个学霸甚至比我还矮。</p>
<p>说到嫉妒这宗罪，真是人类迈不过去的一道坎，堪称世界性不可治愈型流行病。因为嫉妒很多人会犯一些颠覆常识、泯灭人性的错误。正如每次在足球比赛结束之后，你可能看到一方的球迷因为对方头牌犯的一个莫须有的错误而给他贴上猪狗不如的标签，而对方的球迷会因为自己的骄傲被如此对待，而故意挑起更大的冲突。对了，我说的就是皇马和巴萨，C罗和梅西。</p>
<p>C罗曾经说过，「那些批评我的人都是嫉妒我长得帅、又有钱，球还踢的好」这句话其实不无道理。对于一个起点极高的人，你当然会抱怨世界的不公，抱怨这其中是否有什么蹊跷。躺在安稳的沙发上，对着奋力一次次轰门的C罗大放厥词。</p>
<p>然后在事情过后，将自己产生的痕迹消灭得干干净净，就像家畜那样掩埋掉自己排泄的场所。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多说话让你有活着的实感，甚至还能调动你的神经，使你更为神采奕奕。&lt;/p&gt;
&lt;p&gt;然而说出的不同的内容给自己和别人带来的影响也是不同的，比如有些人喜欢通过说话来贬低别人从而抬升自己，还有人希望用自己的一己之见混淆视听，这些都不是什么好的行径。&lt;/p&gt;
&lt;p&gt;有些人说出的话其实
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最轻量的 ES2015 编译配置</title>
    <link href="https://egoist.moe/2017/04/28/the-most-lightweight-es2015-setup/"/>
    <id>https://egoist.moe/2017/04/28/the-most-lightweight-es2015-setup/</id>
    <published>2017-04-28T13:11:32.000Z</published>
    <updated>2017-04-28T14:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用-buble-替换-babel">用 Buble 替换 Babel</h2>
<p><a href="http://babeljs.io/" target="_blank" rel="external">Babel</a> 可以说是编译 ES2015+ 代码到 ES5 的首要选择，它的可扩展性很高，基于插件几乎能做任何事。</p>
<p>而 <a href="https://buble.surge.sh/guide/" target="_blank" rel="external">Buble</a> 则去掉了这种可扩展性，只会转换能够用 ES5 实现并保证性能的新特性，同时这样也让你免去配置的步骤。</p>
<p>对于下面这段代码，你可以通过编译结果看出它们设计上的不同:</p>
<pre><code class="language-js">class Foo {
  constructor() {
    this.pos = 0
  }

  say(word) {
    return `hello ${world}`
  }

  walk() {
    this.pos++
  }
}
</code></pre>
<p>Babel 的结果:</p>
<pre><code class="language-js">&quot;use strict&quot;;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(&quot;Cannot call a class as a function&quot;); } }

var Foo = function () {
  function Foo() {
    _classCallCheck(this, Foo);

    this.pos = 0;
  }

  _createClass(Foo, [{
    key: &quot;say&quot;,
    value: function say(word) {
      return &quot;hello &quot; + world;
    }
  }, {
    key: &quot;walk&quot;,
    value: function walk() {
      this.pos++;
    }
  }]);

  return Foo;
}();
</code></pre>
<p>Buble 的结果:</p>
<pre><code class="language-js">var Foo = function Foo() {
  this.pos = 0
};

Foo.prototype.say = function say (word) {
  return (&quot;hello &quot; + world)
};

Foo.prototype.walk = function walk () {
  this.pos++
};
</code></pre>
<p>总的来说 Buble 的结果可读性更强、更简洁，而且设计初衷就是为了不引入 <code>_createClass</code> 之类的 runtime。</p>
<h2 id="async-await-和-generator-函数">async/await 和 generator 函数</h2>
<p>Buble 暂时不支持编译 async/await 和 generator 函数，目前有以下几个工具作为替代:</p>
<ul>
<li><a href="https://github.com/MatAtBread/nodent" target="_blank" rel="external">nodent</a> (性能比 babel-plugin-tranform-async-to-generator 更好)</li>
<li><a href="https://github.com/leebyron/async-to-gen" target="_blank" rel="external">async-to-gen</a> (不支持编译 generator)</li>
</ul>
<p>我一般会将 Rollup、Buble 以及 async-to-gen 配合使用:</p>
<pre><code class="language-js">// rollup.config.js
export default {
  plugins: [
    require('rollup-plugin-async')(),
    require('rollup-plugin-buble')()
  ]
}
</code></pre>
<p>其实由于在开发 web app 的时候基本还是用 webpack 为主而且又是对 ES features 的需求不止于 ES2015，这个时候我一般还是选择用 Babel 编译。</p>
<p>而对于可复用的 library，不太需要 async/await 或者只是针对 Node.js 环境的时候，使用 Buble 还是很理想的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用-buble-替换-babel&quot;&gt;用 Buble 替换 Babel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel&lt;/a&gt; 可以说是编译 ES2015+ 代码到 
    
    </summary>
    
    
      <category term="babel" scheme="https://egoist.moe/tags/babel/"/>
    
      <category term="buble" scheme="https://egoist.moe/tags/buble/"/>
    
  </entry>
  
  <entry>
    <title>vbuild</title>
    <link href="https://egoist.moe/2017/02/15/vbuild/"/>
    <id>https://egoist.moe/2017/02/15/vbuild/</id>
    <published>2017-02-15T11:36:26.000Z</published>
    <updated>2017-02-17T10:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’m very proud to announce <a href="https://github.com/egoist/vbuild" target="_blank" rel="external">vbuild 6</a>, an opinionated but configurable Webpack wrapper for bundling front-end Vue.js apps, allowing you to use Webpack like a pro! No decision-making while reducing boilerplate code, solving problems like when to split vendor code, how to manage static files, CSS extracting et al.</p>
<img class="border-image" src="https://ooo.0o0.ooo/2017/02/17/58a6cc0680006.png" alt="preview">
<p>To start using, all you need is to write your app directly, let’s say <code>index.js</code>:</p>
<pre><code class="language-jsx">import Vue from 'vue'

new Vue({
  el: '#app',
  render: h =&gt; &lt;h1&gt;Hello World!&lt;/h1&gt;
})
</code></pre>
<p>Without <code>vbuild</code>, you need to create a <code>webpack.config.js</code> with a lot of boilerplate code, and install many dev dependencies in <code>package.json</code>, which is very verbose to perform.</p>
<p>Now we can run a single command <code>vbuild --dev</code> to replace the process above.</p>
<p>This blog post will go into the philosophy and design decisions of the project. To learn how to use vbuild instead, please refer to the <a href="https://github.com/egoist/vbuild#readme" target="_blank" rel="external">README</a>, where you can learn the entirety of the tool’s capabilities in just a few minutes.</p>
<p>First we’ll dive into the <a href="#background">background</a> of this project.</p>
<h2 id="background">Background</h2>
<p>In the past few years, bundlers like Webpack and browserify have taken over the market. Before that, Gulp had just made some progress in the process of replacing Grunt as the major build tool of front-end assets.</p>
<p>The main reason that Gulp is replacing Grunt is the <strong>simplicity</strong> in my opinion. Who knows that I had been using PHP for years before meeting Node.js, developing and deploying PHP apps is that stupidly fast and easy.</p>
<p>Since then, I’ve made my mind that I want to develop JavaScript apps in a simple way. At the same time, I did fall in love with <a href="https://github.com/sindresorhus/xo" target="_blank" rel="external">XO</a>, which is an ESLint wrapper that reduces the overhead of managing config files. vbuild is to Webpack as XO is to ESLint.</p>
<h2 id="why-vue-js">Why Vue.js</h2>
<p>There’re similar tools like <a href="https://github.com/insin/nwb" target="_blank" rel="external">nwb</a> or <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">create-react-app</a>, but vbuild is mainly for Vue.js.</p>
<p>Despiting that vbuild has extra support for Vue’s single-file component, it actually works for all kinds of JavaScript frameworks! The <strong>no-config</strong> feature works better in Vue.js apps though.</p>
<p>Have to note that, Vue.js itself is getting well with the idea <strong>no-config</strong>, you can use it directly in a <code>index.html</code> file, or work with any bundler, out-of-box nice development experience, hot-code reloading support, officially maintained router and state-managament library.</p>
<h2 id="future">Future</h2>
<p>I do have some exciting future plans for vbuild, like <a href="https://github.com/egoist/vbuild/issues/112" target="_blank" rel="external">server-side rendering support</a> (I know there’s Nuxt.js already) and better testing experience for Vue.js app.</p>
<p>Currently you can see vbuild’s <code>run</code> option, which allows you to perform custom build process instead of running webpack:</p>
<pre><code class="language-js">module.exports = {
  run(webpackConfig) {
    // Your custom logic...
  }
}
</code></pre>
<p>If you’re interested in contributing, please join the party, check out the <a href="https://github.com/egoist/vbuild/issues" target="_blank" rel="external">issue tracker</a> or contact me personally on Twitter <a href="https://twitter.com/rem_rin_rin" target="_blank" rel="external">@rem_rin_rin</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’m very proud to announce &lt;a href=&quot;https://github.com/egoist/vbuild&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vbuild 6&lt;/a&gt;, an opinionated but con
    
    </summary>
    
    
      <category term="vue" scheme="https://egoist.moe/tags/vue/"/>
    
      <category term="webpack" scheme="https://egoist.moe/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>风夏的前世今生</title>
    <link href="https://egoist.moe/2017/02/11/fuuka-fate/"/>
    <id>https://egoist.moe/2017/02/11/fuuka-fate/</id>
    <published>2017-02-11T11:59:29.000Z</published>
    <updated>2017-03-04T10:47:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>风夏的父亲是作为日本代表获得世界田径锦标赛百米亚军的秋月大和，说起来那也算是一段传奇了。</p>
<p>大和本是所谓田径这类运动的门外汉，体力好可能是他与其唯一能扯上关系的东西了。从乡下老家去东京上高中无疑拓宽了大和的视野，初次游览新学校就领略到了运动之美 —— 一个短头发的女孩身着田径运动员特有的露脐装跃跃欲试，只见女孩突然急行加速绕了一个弧形来到横杆面前，一个侧身，呜哇，绝赞的一跃！</p>
<p>大和看呆了，女孩的上半身逐渐和横杆平行并超越，即将过杆时横杆与女孩的眼睛、胸部、双腿构成的抛物线让大和似乎有了亲临运动场的实感，绝美的一幕。</p>
<p>如果这样的场景不能让大和对她一见钟情，那么一见钟情这几个字还有什么实在意义呢。这个像凉风一样的女孩吹进了大和的心里，开启了大和和凉风的故事。</p>
<p>讲述了风夏父母的初见，该说风夏的谢幕了。对啊，风夏死了，死了啊。大和与凉风经历了许多才最终在一起，甚至最后因为凉风怀孕双双放弃学业和田径开始步入社会，维持一个家庭，和刚刚诞生的秋月风夏组成的三口之家。</p>
<p>最终这个让他们做出人生重大决定的女儿就这样简单地消失了。没有意义吗，有意义吗，意义在哪呢。</p>
<p>这不只是牵扯到大和与凉风的梦想，风夏不也有吗，是啊，风夏也长大了，到了大和与凉风初识的那个年纪，也有了自己想做的事。风夏不喜欢手机，因为用手机玩游戏上网维持虚拟的人际关系不如现实中来的有实感，风夏喜欢听歌，常常头戴耳机站在学校天台上望着夏日的风景。</p>
<p>风夏极其灵动，活泼开朗的性格很难让你想到她这静的一面。在天台听着歌远眺的模样足以获得当年凉风越过横杆时获得的倾慕。</p>
<p>风夏的男朋友是个沉迷推特的年轻人，也是她的同班同学。在他突然转来风夏班里的时候还发生了被风夏当做偷拍内裤的变态而把手机摔碎的事。很难想象不用手机的风夏会和他在一起吧，可是这又有什么问题呢。</p>
<p>风夏出事故的那天本来是她梦想开始的一天。优的到来让风夏找到了自己想做的事，与其说是一种指引不如说是一种鼓励，优喜欢赞美风夏的声音，唱起歌来纯洁有力，像有空灵般的穿透力。风夏的声音很大也让优有所领教，在八公像前大喊着优的名字让周围所有人都犯了尴尬症。优说那就做乐队吧，风夏的声音没有问题的，与其说是没有问题不如说太好听了，不做音乐简直浪费。就是这样，这一天本来是风夏和优的乐队第一次登场比赛的时候，风夏却在路上遭遇了车祸。</p>
<p>比赛时风夏迟迟不来，没办法风夏又不用手机也无法联系，优被乐队成员和主办方强推到了主唱的位置。最终结果却令现场所有人瞠目结舌，原来像风夏那样天才般的歌声这个乐队还有一人拥有！</p>
<p>可是这一切似乎没有了意义，有一些东西谁都无法躲避。比赛之后，优在风夏走过的路的一旁坐着，手里拿着的手机早也关了机。路旁经过的小孩子看上去很好奇就问：大哥哥，你在等人吗？诶手机没电了是要给女朋友打电话吗。优看起来还是和平常一样，只是双手撑着长椅：是啊，可是我女朋友不用手机的。</p>
<p>优很自责，为什么那天自己没有和风夏一起去比赛，为什么风夏死了连自暴自弃的勇气都没有，脸上绷直的表情想要竭力维持一个正常人的模样。</p>
<p>可是风夏确实离开了，在那之后优想继续实现风夏理想，经过多次劝说之前的乐队成员也都再一次回来了，毕竟是风夏选择的成员。风夏离开一年后，第二次比赛，来了。</p>
<p>那是一天夜里，优来到比赛场馆附近看看，走出车站被人群里窜出的歌声所吸引，这不是风夏和他最喜欢的「星落的小镇」吗。穿过人群，优看到了弹着吉他唱歌的女孩，虽然也不是长发，虽然有些相似，可是这个女孩和风夏还是有些差别，风夏可不怎么弹吉他。如果说风夏像是天使，而这个女孩就像出现在优眼前的精灵。</p>
<p>突然感到的寒意让优意识到了时间，回过神来周围已经没人了，有的只是还在弹奏的女孩。优试着问：你还要弹到什么时候，虽然我也很喜欢继续听就是了，可是这么晚女孩子回家不太安全吧。女生听了满不高兴的样子：哼，谁叫你听得那么入迷啊，这样的话我怎么好一个人自说自话地离开啊！优顿时脸就红了，不过幸好有人来解了围，不幸的是来者乃车站管理人员，而且还凶恶地走过来问道：诶你们在这里干什么啊，要摆摊到别处啊！女孩见此情形拎起吉他包甩给优说到：快跑！</p>
<p>听着风声过了一会儿，女孩叫优停下：现在应该没问题了，在台阶那里休息一下吧。女孩的穿着十分摩登，和这把吉他很配，黑色短夹克里面是性感但不失稳重的背心，下面穿着的则是短牛仔裤。优有些不自然就想找些话题：你的歌真好听啊，正巧我也是做乐队的，来这附近就是来参加比赛的。女孩听了略感惊讶，原来她的乐队也会在这次比赛中登场，于是她就开这玩笑让优给她唱一段。优唱了一段「星落的小镇」，女孩似乎也听得很入神，两人居然坐着唱歌唱到了第二天早上！最后这个要强的女孩和优约定要在比赛场上决胜负：你叫优是吧，不用手机确实挺奇怪的，不过无所谓啦，反正过几天比赛上会见的 ——</p>
<p>优：对了你还没说你叫什么呢！<br>
女孩：风夏，碧井风夏。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;风夏的父亲是作为日本代表获得世界田径锦标赛百米亚军的秋月大和，说起来那也算是一段传奇了。&lt;/p&gt;
&lt;p&gt;大和本是所谓田径这类运动的门外汉，体力好可能是他与其唯一能扯上关系的东西了。从乡下老家去东京上高中无疑拓宽了大和的视野，初次游览新学校就领略到了运动之美 —— 一个短头发
    
    </summary>
    
    
      <category term="fuuka" scheme="https://egoist.moe/tags/fuuka/"/>
    
  </entry>
  
  <entry>
    <title>单相思</title>
    <link href="https://egoist.moe/2017/01/26/unrequited-love/"/>
    <id>https://egoist.moe/2017/01/26/unrequited-love/</id>
    <published>2017-01-26T01:54:00.000Z</published>
    <updated>2017-01-27T08:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>我特意去查了初恋的定义，果然那段不能叫初恋啊，毕竟我还没问过她愿不愿意做我女朋友。于是我又想是暗恋吗，应该不可能，她可是知道得一清二楚，而且也算有几次能称得上是「约会」的好事发生呢。果然还是只能勉强叫做单相思吧，虽然她也似乎不讨厌我，估计是想相处试试 😄 最后终于没有合格，连败部复活赛都没有。</p>
<p>现在想想之前很生气的我真是很蠢呢，明明也是一段开心的时光。不过为什么在大年三十我想起这些陈年旧事呢，大概是因为不知道她最近过得怎么样了，虽然我不可思议的还记得她的手机号（没什么特别的，我以前用过的手机号也都记得），还是不要打扰吧，她已经有真正重要的东西了。</p>
<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/61923187&amp;color=ff5500&amp;auto_play=true&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我特意去查了初恋的定义，果然那段不能叫初恋啊，毕竟我还没问过她愿不愿意做我女朋友。于是我又想是暗恋吗，应该不可能，她可是知道得一清二楚，而且也算有几次能称得上是「约会」的好事发生呢。果然还是只能勉强叫做单相思吧，虽然她也似乎不讨厌我，估计是想相处试试 😄 最后终于没有合格
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>拥有能够眺望的远方</title>
    <link href="https://egoist.moe/2017/01/12/this-is-how-it-started/"/>
    <id>https://egoist.moe/2017/01/12/this-is-how-it-started/</id>
    <published>2017-01-12T09:56:09.000Z</published>
    <updated>2017-01-12T10:24:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了冬季新番「风夏」，本来只是普通地再一次被女主角打动而已，可是在无意看了评论区之后心情却变成另一个极端。</p>
<blockquote>
<p>风夏在漫画里死了。</p>
</blockquote>
<p>虽然女主角死掉的漫画和动画都有，可是上了作品标题同时死了的还是非常令人难以相信，更何况是如此打动我的风夏。</p>
<p>于是第二天按耐不住好奇，彻夜看完了风夏的漫画(正在连载的部分)。就算知道风夏会死，我也没想到在第 37 话就说了再见，而且似乎「什么都还没有做」就离开了，甚至后来还出现了另一个叫风夏的。很多人诟病的是作者冷酷地对待自己作品里的角色和自己的读者，我也曾经这样觉得，因为一想到后面那么多的故事不是风夏和男主来一起经历那还有什么意义啊，我就忍不住想和男主一起哭。</p>
<blockquote>
<p>我总想的是: 如果是风夏在这里会怎样呢?</p>
</blockquote>
<p>很残忍，令人难过。听说作者濑尾公治是小时候看了「哆啦A梦」之后便想成为一个漫画家。惊人地相似，我在看过濑尾的「涼風」「風夏」之后，虽说不至于做梦成为漫画家，可是也想画出令自己觉得残忍和难过的作品呢。</p>
<hr>
<p>于是我今天开始学习画画了，正因如此对于代码和开源我可能一段时间内不会碰了。</p>
<p>那以后有机会画给你瞧瞧吧 :D</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看了冬季新番「风夏」，本来只是普通地再一次被女主角打动而已，可是在无意看了评论区之后心情却变成另一个极端。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;风夏在漫画里死了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然女主角死掉的漫画和动画都有，可是上了作品标题同时死了的还
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>miku: 一般性前端调试工具</title>
    <link href="https://egoist.moe/2016/12/18/miku/"/>
    <id>https://egoist.moe/2016/12/18/miku/</id>
    <published>2016-12-18T11:21:17.000Z</published>
    <updated>2016-12-18T15:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>你大概知道 jsbin、jsfiddle、codepen 这些在线代码调试工具，我经常使用 jsbin 不过它们都有各自的局限性:</p>
<ul>
<li>编辑器不够强大，毕竟是在线工具</li>
<li>没有模块系统支持，调用第三方库只能通过 script 标签引用 UMD 格式的文件</li>
<li>局限于 HTML/CSS/JS</li>
</ul>
<p>所以我用我经常使用的 webpack 做了一个基于它的代码调试工具叫做 <a href="https://github.com/egoist/miku" target="_blank" rel="external"><strong>miku</strong></a>，它主要就是解决了上述工具存在的不足。</p>
<pre><code class="language-bash">miku example.js example.css
</code></pre>
<p>miku 的原理就是你提供一些想测试的文件，比如叫 <code>example.js</code> 和 <code>example.css</code> 。它会将这些文件作为 webpack 的入口文件编译，然后通过 <a href="https://github.com/ampedandwired/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a> 用一个 html 文件加载，最后通过服务器渲染出来，你就能打开浏览器看到显示效果了。</p>
<p>这样做的好处是你能充分享受 webpack 的功能，我们都知道 webpack 的配置虽不是什么高难度的事但也是挺麻烦的，尤其当你有很多项目的时候。现在你可以直接运行 miku 通过预配置的 webpack 运行你的 demo 了。</p>
<p>miku 默认添加了很多常用的 loader 配置:</p>
<ul>
<li>postcss</li>
<li>babel</li>
<li>coffeescriot</li>
<li>typescript</li>
<li>sass</li>
<li>less</li>
<li>pug</li>
<li>livescript</li>
</ul>
<p>等等…… 而且图片和字体文件也用 file-loader 做了处理，svg 文件则使用 raw-loader 加载。</p>
<p>当然「直接在浏览器中编辑 JS/CSS」那种在线调试工具的方便暂时也无可替代，虽然也有 <a href="http://webpackbin.com" target="_blank" rel="external">webpackbin</a> <a href="http://esnextb.in" target="_blank" rel="external">esnextbin</a> <a href="http://requirebin.com/" target="_blank" rel="external">requirebin</a> 基于 bundler 的在线调试工具，不过我不只是想调试，也想让文件存在于我的本地磁盘里。</p>
<h2 id="span-由来-span"><span>由来</span></h2>
<p>任何事情都不是空穴来风，我的轮子尤其如此。我昨晚在搞一个叫做 <code>real-dom</code> 的项目，之后我才发现很类似 <a href="https://github.com/pakastin/redom" target="_blank" rel="external">redom</a>，不过当时我有个「做个 example」的需求，手动预览这些用了 babel 的项目真的挺麻烦，所以想做这样一个东西。</p>
<p><strong>虽然我之前的那个 <a href="https://github.com/egoist/vbuild" target="_blank" rel="external">vbuild</a> 几乎能胜任这项任务，不过我之后联想到了 jsbin，就有是不是能继续往这方面发展的想法。</strong> 所以又一个轮子诞生了。</p>
<blockquote>
<p>Just build things. It doesn’t matter if someone else thinks it’s a bad idea as long as you think it isn’t. Really.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你大概知道 jsbin、jsfiddle、codepen 这些在线代码调试工具，我经常使用 jsbin 不过它们都有各自的局限性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器不够强大，毕竟是在线工具&lt;/li&gt;
&lt;li&gt;没有模块系统支持，调用第三方库只能通过 script 标签引用 U
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>优雅地打包前端 JavaScript 库</title>
    <link href="https://egoist.moe/2016/11/16/bundle-front-end-js-library/"/>
    <id>https://egoist.moe/2016/11/16/bundle-front-end-js-library/</id>
    <published>2016-11-16T07:55:48.000Z</published>
    <updated>2016-11-16T10:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>打包 JS 库没有打包 Web App 那样复杂，但还是可以变得更简单。</p>
<h2 id="span-常见用例-span"><span>常见用例</span></h2>
<p>一个 JS 库一般需要一个 CommonJS 版本，它不会打包 node_modules 里的模块。以及一个 UMD 版本的，用于在浏览器中直接使用，它会打包 node_modules 里的模块。</p>
<p>使用 <a href="https://github.com/universe-denpa/bili" target="_blank" rel="external">bili</a> 一切都会变得简单，简单到只需要一条命令:</p>
<pre><code class="language-bash">bili --format cjs --format umd --module-name MyModule
</code></pre>
<p>这条命令的意思是打包 <code>./src/index.js</code> 到 <code>./dist</code> 目录，并且转换成 <code>CommonJS</code> 和 <code>UMD</code> 格式的文件，其中 <code>UMD</code> 格式中模块名设定为 <code>MyModule</code>，这样在浏览器中就可以通过全局变量 <code>MyModule</code> 引用。</p>
<p>如果你同时需要一个压缩后的 UMD 格式文件，直接加上 <code>--compress</code> 参数就能额外得到一个 <code>.min.js</code> 和它的 <code>sourcemap</code> 文件。</p>
<h2 id="span-es2015-span"><span>ES2015</span></h2>
<p>打包的一个目的就是使用 Babel 之类的转换器编译 ES next 到 ES5，bili 默认使用 <a href="https://buble.surge.sh/guide" target="_blank" rel="external">buble</a> 来转换 JavaScript 代码，相比 Babel 它更轻量。</p>
<p>你当然也可以在 bili 中使用 babel 来编译代码，这需要用到 bili 的配置文件 <code>bili.config.js</code>:</p>
<pre><code class="language-js">module.exports = {
  jsCompiler: require('rollup-plugin-babel')({
    presets: ['preset']
  })
}
</code></pre>
<p>bili 是基于 <a href="https://github.com/rollup/rollup" target="_blank" rel="external">Rollup</a> 的，所以相关 Rollup 插件都可以用来编译 JS 代码。</p>
<h2 id="span-buble-span"><span>Buble</span></h2>
<p>正如之前说了，默认我们使用 <code>buble</code>，你可以在配置文件中更改 buble 的配置参数:</p>
<pre><code class="language-js">module.exports = {
  buble: {
    objectAssign: 'objectAssign'
  }
}
</code></pre>
<p>值得一提的是，buble 不支持 <code>async/await</code> 并且不能将 <code>generator</code> 转换成 ES5 代码，所以我们保留了 generator 代码并且用 <a href="https://github.com/leebyron/async-to-gen" target="_blank" rel="external">async-to-gen</a> 将 <code>async/await</code> 转换到 <code>generator</code>，如果用到了这两个请考虑浏览器兼容性，或者换成 babel 来编译。</p>
<h2 id="span-watch-mode-span"><span>Watch mode</span></h2>
<p>在开发的时候编译代码没有 <code>watch</code> 模式会非常痛苦，想开启 bili 的 watch 模式可以直接加上 <code>--watch</code> 参数。</p>
<h2 id="span-更多资料-span"><span>更多资料</span></h2>
<p>bili 还内置了一些常用的 Rollup 插件，更多使用方法请参考 bili 的 <a href="https://github.com/universe-denpa/bili/wiki" target="_blank" rel="external">GitHub Wiki</a> 页面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打包 JS 库没有打包 Web App 那样复杂，但还是可以变得更简单。&lt;/p&gt;
&lt;h2 id=&quot;span-常见用例-span&quot;&gt;&lt;span&gt;常见用例&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;一个 JS 库一般需要一个 CommonJS 版本，它不会打包 node_modules 里
    
    </summary>
    
    
      <category term="javascript" scheme="https://egoist.moe/tags/javascript/"/>
    
      <category term="bundle" scheme="https://egoist.moe/tags/bundle/"/>
    
      <category term="bili" scheme="https://egoist.moe/tags/bili/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 和 VS Code 常用快捷键</title>
    <link href="https://egoist.moe/2016/10/05/sublime-vscode-key-bindings/"/>
    <id>https://egoist.moe/2016/10/05/sublime-vscode-key-bindings/</id>
    <published>2016-10-05T13:00:47.000Z</published>
    <updated>2016-10-05T14:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么是 Sublime Text 和 VS Code 这样奇怪的组合一起说呢，因为目前为止我最喜欢这两个编辑器。当然 Atom 也非常好，如果启动速度更快的话也许我会用得更多。Sublime 的优点就是 UI 简单但不丑，也有些很不错的主题，这里面我最喜欢的就是 <a href="https://github.com/equinusocio/material-theme" target="_blank" rel="external">Material Theme</a>、<a href="https://github.com/samuelrafo/piatto" target="_blank" rel="external">Partto Theme</a> 以及 <a href="https://github.com/dempfi/ayu" target="_blank" rel="external">Ayu Theme</a>，相比之下 VS Code 的主题没那么风骚，但显得非常 「Solid」也挺耐看，不能说有个性就是了。</p>
<p>不过不得不说， VS Code 作为编辑器的功能还是比 Sublime 强。</p>
<h2 id="span-显示效果-span"><span>显示效果</span></h2>
<h3 id="重新打开刚刚关闭的标签页">重新打开刚刚关闭的标签页</h3>
<p><kbd>Command</kbd> <kbd>Shift</kbd> <kbd>T</kbd></p>
<h3 id="粘贴时自动缩进">粘贴时自动缩进</h3>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>Shift</kbd> <kbd>V</kbd><br>
<strong>VS Code</strong>: 不支持，但可以在粘贴后用 <kbd>Option</kbd> <kbd>Shift</kbd> <kbd>F</kbd> 替代，<a href="http://stackoverflow.com/questions/34627181/how-does-one-paste-and-indent-in-visual-studio-code" target="_blank" rel="external">查看更多</a></p>
<h3 id="切换标签页">切换标签页</h3>
<p><kbd>Command</kbd> <kbd>Option</kbd> <kbd>←/→</kbd></p>
<h3 id="分割编辑器">分割编辑器</h3>
<p>也就是把一个编辑器分成两个或多个块。</p>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>Option</kbd> <kbd>1/2</kbd><br>
<strong>VS Code</strong>: <kbd>Command</kbd> <kbd>\</kbd></p>
<h3 id="显示-隐藏侧边栏">显示 / 隐藏侧边栏</h3>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>K B</kbd><br>
<strong>VS Code</strong>: <kbd>Command</kbd> <kbd>B</kbd></p>
<h2 id="span-选取内容-span"><span>选取内容</span></h2>
<h3 id="选取光标附近的内容">选取光标附近的内容</h3>
<p>通常是一个单词，连按 d 会继续选取下一个相同的内容。</p>
<p><kbd>Command</kbd> <kbd>D</kbd></p>
<h3 id="往左-右选取一个字符">往左 / 右选取一个字符</h3>
<p>通常与上一步一起使用进行更精确的选取。</p>
<p><kbd>Shift</kbd> <kbd>←/→</kbd></p>
<h3 id="选取光标所在的行">选取光标所在的行</h3>
<p>同样，连按会继续选取下一行。</p>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>L</kbd><br>
<strong>VS Code</strong>: <kbd>Command</kbd> <kbd>I</kbd></p>
<h3 id="将光标移至选取的每一行末尾">将光标移至选取的每一行末尾</h3>
<p>通常与上一步一起操作，用于多行编辑。</p>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>Shift</kbd> <kbd>L</kbd><br>
<strong>VS Code</strong>: <kbd>Control</kbd> <kbd>Option</kbd> <kbd>I</kbd></p>
<h3 id="在多个位置显示光标">在多个位置显示光标</h3>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>点击</kbd><br>
<strong>VS Code</strong>: <kbd>Option</kbd> <kbd>点击</kbd></p>
<h3 id="将光标移至行首-行尾">将光标移至行首 / 行尾</h3>
<p><kbd>Command</kbd> <kbd>←/→</kbd></p>
<h3 id="从光标所在位置选取到行首-行尾的内容">从光标所在位置选取到行首 / 行尾的内容</h3>
<p><kbd>Command</kbd> <kbd>Shift</kbd> <kbd>←/→</kbd></p>
<h2 id="span-查找内容-span"><span>查找内容</span></h2>
<h3 id="搜索项目中的文件">搜索项目中的文件</h3>
<p><kbd>Command</kbd> <kbd>P</kbd></p>
<h3 id="跳到指定的一行">跳到指定的一行</h3>
<p><kbd>Control</kbd> <kbd>G</kbd></p>
<h3 id="跳到函数定义">跳到函数定义</h3>
<p><strong>Sublime</strong>: <kbd>Command</kbd> <kbd>R</kbd></p>
<h2 id="span-移动内容-span"><span>移动内容</span></h2>
<h3 id="上下移动选取的内容">上下移动选取的内容</h3>
<p><kbd>Command</kbd> <kbd>Control</kbd> <kbd>↑/↓</kbd></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么是 Sublime Text 和 VS Code 这样奇怪的组合一起说呢，因为目前为止我最喜欢这两个编辑器。当然 Atom 也非常好，如果启动速度更快的话也许我会用得更多。Sublime 的优点就是 UI 简单但不丑，也有些很不错的主题，这里面我最喜欢的就是 &lt;a h
    
    </summary>
    
    
      <category term="sublime" scheme="https://egoist.moe/tags/sublime/"/>
    
      <category term="vs code" scheme="https://egoist.moe/tags/vs-code/"/>
    
  </entry>
  
  <entry>
    <title>用 npm scripts 和 nswatch 替代 gulp</title>
    <link href="https://egoist.moe/2016/08/29/kill-gulp-with-npm-scripts-and-nswatch/"/>
    <id>https://egoist.moe/2016/08/29/kill-gulp-with-npm-scripts-and-nswatch/</id>
    <published>2016-08-29T08:54:30.000Z</published>
    <updated>2016-10-01T17:20:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="span-为什么用-npm-scripts-span"><span>为什么用 npm scripts ?</span></h2>
<p>首先我觉得  <a href="https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8#.8wsejnq0u" target="_blank" rel="external">Why I Left Gulp and Grunt for npm Scripts</a> 里说的不用 gulp 的理由基本没有道理:</p>
<ol>
<li>gulp 插件质量、数量和实时性</li>
</ol>
<p>作者抱怨 gulp 插件的质量取决于插件作者，这可以理解，<strong>但是 npm 的包同样取决于作者啊</strong>。</p>
<p>作者抱怨 gulp 插件的数量不如 npm，<strong>这不是废话吗</strong>。</p>
<p>作者抱怨 gulp 插件不能及时更新，比如 babel 6 升级了 gulp-babel 并没有立刻升级。<strong>又不是看直播，干嘛实时?</strong></p>
<ol start="2">
<li>debug 很痛苦，gulp crash 掉是因为某个插件吗还是因为版本问题</li>
</ol>
<p>额，难道直接用 npm package 就没有这些问题吗。</p>
<ol start="3">
<li>不连贯的文档，比如 gulp-eslint 和 eslint，eslint 的文档就是 gulp 插件的文档好得多</li>
</ol>
<p>这不又是废话吗，写个插件还要把用的包的文档重新写一遍?</p>
<hr>
<p>好了，原文挑剔 gulp 的理由全被扳倒了，但是其中支持 npm 的理由倒是挺有道理:</p>
<ol>
<li>npm scripts 并不需要你很擅长命令行操作</li>
</ol>
<p>你并不需要在 npm scripts 里用一些很高深的命令行，很多 unix 命令是需要花很长时间学习的。像类似 rm -rf 之类的命令很容易掌握，而且也有相应的 npm 包 <a href="https://github.com/isaacs/rimraf" target="_blank" rel="external">rimraf</a> 让你使用，且跨平台支持。</p>
<ol start="2">
<li>npm scripts 不够强大吗?</li>
</ol>
<pre><code class="language-JSON">{
  &quot;scripts&quot;: {
    &quot;clean&quot;: &quot;rimraf ./dist &amp;&amp; mkdir dist&quot;,
    &quot;prebuild&quot;: &quot;npm run clean&quot;,
    &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack&quot;
  }
}
</code></pre>
<p>npm scripts 甚至支持 <code>pre</code> <code>post</code> 这些 hook 让你在相应的一个 task 之前和之后调用。</p>
<p>你可以直接执行一个文件来完成相应的构建工作，这让你几乎能做任何 gulp 能做的事:</p>
<pre><code class="language-JSON">{
  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;node build.js&quot;
  }
}
</code></pre>
<ol start="3">
<li>npm scripts 不是跨平台的</li>
</ol>
<p>因为你可能会在 npm scripts 里用一些 unix 命令，解决方案有很多，比如用 npm 包替代这些命令。</p>
<ol start="4">
<li>可维护性</li>
</ol>
<p>gulp tasks 也多了以后会变得很难维护，npm scripts 也是。解决方案是推荐写精简的 script，比如一个 script 只干一件事。或者很长很复杂的话你就需要专门放到一个 JS 文件里然后再在 npm scripts 里调用了。</p>
<h2 id="span-nswatch-span"><span>nswatch</span></h2>
<blockquote>
<p><a href="https://github.com/egoist/nswatch" target="_blank" rel="external">https://github.com/egoist/nswatch</a></p>
</blockquote>
<p>在 npm scripts 里只执行一个构建任务你可能不需要类似 <code>gulp.watch</code> 这样的功能，因为大部分构建工具都自带了 watch 功能，比如 <code>webpack --watch</code> 和 <code>rollup --watch</code>，但是排除这种情况在构建多个任务的时候就不方便了。</p>
<p>比如你要同时用一些 <code>.jade</code> <code>.css</code> <code>.js</code> 这些文件分别编译成 <code>.html</code> <code>.css</code> <code>.js</code> 文件，开发的时候怎么搞啊，怎么 watch 这些文件然后执行 rebuild 呢？好吧，你又想到了 <code>gulp</code> 😂</p>
<p>不过现在有 <code>nswatch</code> 了，为了解决类似的需求我今早洗澡之后写的。和 <code>gulp.watch</code> 类似，监听一些文件，不过这里是执行相应的 npm script。</p>
<p>你的 npm scripts:</p>
<pre><code class="language-JSON">{
  &quot;scripts&quot;: {
    &quot;build:js&quot;: &quot;node scripts/build js&quot;,
    &quot;build:html&quot;: &quot;node script/build html&quot;,
    &quot;build:css&quot;: &quot;node scripts/build css&quot;
  }
}
</code></pre>
<p>然后你可以在 <code>scripts/build.js</code> 里用你喜欢的 npm 包，比如 rollup, jade, postcss，来编译相应文件。</p>
<p>最后添加 <code>nswatch</code>:</p>
<pre><code class="language-JSON">{
  &quot;scripts&quot;: {
    &quot;watch&quot;: &quot;nswatch src/*.js --script build:js &amp; nswatch src/*.css --script build:css  &amp; nswatch src/*.jade --script build:html &quot;
  }
}
</code></pre>
<p>由于有三个任务所以写得很长，你可以把它放进单独文件 <code>scripts/watch.js</code>:</p>
<pre><code class="language-JavaScript">const watch = require('nswatch')

watch('./src/*.js', ['build:js'])
watch('./src/*.jade', ['build:html'])
watch('./src/*.css', ['build:css'])
</code></pre>
<p>然后执行 <code>node scripts/watch</code> 一切都能运行了！</p>
<p>最后你可能还是需要把 <code>node scripts/watch</code> 写进 <code>package.json</code>，以后都用 <code>npm run watch</code> 来执行:</p>
<pre><code class="language-JSON">{
  &quot;scripts&quot;: {
    &quot;watch&quot;: &quot;node scripts/watch&quot;
  }
}
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;span-为什么用-npm-scripts-span&quot;&gt;&lt;span&gt;为什么用 npm scripts ?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;首先我觉得  &lt;a href=&quot;https://medium.freecodecamp.com/why-i-left-gulp-
    
    </summary>
    
    
      <category term="gulp" scheme="https://egoist.moe/tags/gulp/"/>
    
      <category term="npm" scheme="https://egoist.moe/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>菜月昴前传</title>
    <link href="https://egoist.moe/2016/08/03/subaru-be-loyal-or-jerk/"/>
    <id>https://egoist.moe/2016/08/03/subaru-be-loyal-or-jerk/</id>
    <published>2016-08-03T14:46:52.000Z</published>
    <updated>2016-12-18T16:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>从零开始的异世界生活</strong> 的最虐心阶段已经过去了？我小说只看到了这以后的一点剧情，所以并不能确定，不过很难想象之后还会有剧情能比 15/17/18 集更触动我。</p>
<p>菜月昴说他会开始踏上成为蕾姆理想中的英雄之路，如果没有之前蕾姆的鼓励，那他说出这番话势必会再次被人口诛笔伐，史上最弱男主的确是事实。然而菜月昴的逆袭是剧情需要，Re:Zero 不可能一直这样 dark 下去，无限循环的死亡回归出现太多反而会引起不适。</p>
<p>按照一般向展开，男主应该是和女主一起秒天秒地秒空气之后拯救众人，幸福美满地回家，这样才有值得后代谈论的事。而 Re:Zero 并不是这样，女主从某一集开始就隐形了，于是后面变成男主为了救一个长时间不上大屏幕露脸的女主死了很多次，然后就是爱着男主的某个女仆为了不让男主死而让自己死了很多次。</p>
<p>简单替换一下，男主是菜月昴，女主是艾米莉亚，女仆是蕾姆。</p>
<p>他们之间的关系可以概括为:</p>
<blockquote>
<p>艾米莉亚从小混混手里救了菜月昴，菜月昴认定这是自己命中注定的另一半，开始大男子主义地施加各种保护，不管她需不需要。虽然之后的确是男主救了艾米莉亚，不过这也全靠他来到异世界获得的能力「死亡回归」，照这样来说真正救艾米莉亚的是沙提拉?</p>
</blockquote>
<blockquote>
<p>菜月昴从森林魔兽手里救了蕾姆，然后蕾姆认定菜月昴是自己的英雄。蕾姆可以理解，毕竟我们看到了关于蕾姆小时候的回忆。菜月昴的确让蕾姆停止的时间重新开始流动了。只是对于菜月昴，他对艾米莉亚的爱有点空穴来风似的。</p>
</blockquote>
<p>菜月昴的人物刻画很写实，这是这个异世界里唯一接近现实的东西了，去掉「异世界」这个设定简直可以直接给「欢迎来到 NHK」拍续集。</p>
<p>Re:Zero 有一点很矛盾，就是「死亡回归」这个设定，这是菜月昴反复经受折磨的关键，也是菜月昴拯救艾米莉亚的关键，没有这个能力也许第一集就能完结了。所以菜月昴到底该痛恨这个诅咒还是接受并利用它，大概是主要剧情想要描述的东西之一。</p>
<p>最后有一点有意思的猜测是，一般各种套路中，两个都是单方面爱着自己所爱的人最终走在了一起。</p>
<p>不过不管后面如何发展，菜月昴到目前为止就像他自己说的那样差劲，而蕾姆只是不想看到曾经治愈了自己的人这样堕落下去。</p>
<p>对的，你是否也已经发现了:</p>
<p><img src="https://oidzj4vwh.qnssl.com/blog/57a1a6c6a86f0.jpg" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从零开始的异世界生活&lt;/strong&gt; 的最虐心阶段已经过去了？我小说只看到了这以后的一点剧情，所以并不能确定，不过很难想象之后还会有剧情能比 15/17/18 集更触动我。&lt;/p&gt;
&lt;p&gt;菜月昴说他会开始踏上成为蕾姆理想中的英雄之路，如果没有之前蕾姆的鼓励
    
    </summary>
    
    
      <category term="anime" scheme="https://egoist.moe/tags/anime/"/>
    
      <category term="rezero" scheme="https://egoist.moe/tags/rezero/"/>
    
      <category term="rem" scheme="https://egoist.moe/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>日本人的英语差劲透了吗</title>
    <link href="https://egoist.moe/2016/07/04/japanese-suck-at-english/"/>
    <id>https://egoist.moe/2016/07/04/japanese-suck-at-english/</id>
    <published>2016-07-04T06:28:49.000Z</published>
    <updated>2016-08-29T08:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是个很片面的看法，不过的确有些日本人确实是这样。就像很多中国人连普通话都说不好。</p>
<p>但是这种看法变成一种现象就很奇怪了，就像你说上海的女人都很强势一样。</p>
<p>特别是有些人耳朵聋了，一听到从日本人嘴里冒出来的英文都打上「日式英语」的标签。</p>
<p>其实即便有些日本人平时生活里说着日式英语，但是一到正式场合的时候都会尽量用标准的英语，比如你可能知道的仓木麻衣，她有首英文歌 <a href="http://music.163.com/#/m/song?id=589136" target="_blank" rel="external">Secret Of My Heart</a> 里的英语应该能算作很标准了吧，可她接受采访的时候基本上都是用罗马音来读英语，比如 friendly 读成 「furenteri」。你可以联想成中文里的音译词，比如「麦当劳」「沙发」，如果叫你在说中文的时候用标准的英语说这些词你是不是也会感到不快呢？试试吧:</p>
<ul>
<li>今天我去 IKEA 买了个 Sofa, 然后去 Mc Donald 吃了午餐。</li>
<li>今天我去宜家买了个沙发，然后去麦当劳吃了午餐。</li>
</ul>
<p>很多时候人们在线用文字交流，所以相关单词写成英文原文也可以，但是看到的时候常常也会联想到这个词的中文音译。</p>
<p>说实话，这些日式英语不过也就是日语里的音译词，没什么可笑的，因为你也天天在接触，只不过是用中文，只不过是用拼音而不是罗马音。拼音的发音相似度和英文不高，所以没有很多人纠结，而很多罗马音读起来至少有半个音节和英语一样，于是有人便成为了这方面的评论家了。同时因为大多数的中文音译词读起来都和原词差距比较大，自然就没有太多中国人在说英语的时候插着说这些音译词。</p>
<p>不信的话试着对老外说「Thank you for today! 拜拜」。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是个很片面的看法，不过的确有些日本人确实是这样。就像很多中国人连普通话都说不好。&lt;/p&gt;
&lt;p&gt;但是这种看法变成一种现象就很奇怪了，就像你说上海的女人都很强势一样。&lt;/p&gt;
&lt;p&gt;特别是有些人耳朵聋了，一听到从日本人嘴里冒出来的英文都打上「日式英语」的标签。&lt;/p&gt;
&lt;p
    
    </summary>
    
    
      <category term="japanese" scheme="https://egoist.moe/tags/japanese/"/>
    
      <category term="prejudice" scheme="https://egoist.moe/tags/prejudice/"/>
    
  </entry>
  
  <entry>
    <title>二〇一六年七月新番推荐</title>
    <link href="https://egoist.moe/2016/07/03/2016-7-anime-recommendations/"/>
    <id>https://egoist.moe/2016/07/03/2016-7-anime-recommendations/</id>
    <published>2016-07-03T14:22:26.000Z</published>
    <updated>2016-10-01T17:18:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>本季我在追的新番大概有 12 部之多！是今年前两季（9、8部）所不能比的，不过之前的数据其实有些水分，有些番是我写了推荐之后才开始看的 XD 所以可能不止那个数字。</p>
<h2 id="span-周一-span"><span>周一</span></h2>
<h3 id="弹丸论破3-未来篇">弹丸论破3 未来篇</h3>
<p>完全是冲着弹丸论破第一季看的，据说新作是完全原创，总之还是怀着情怀先看一下，也许还不错呢。</p>
<h3 id="orange橙色奇迹">orange橙色奇迹</h3>
<p>写信给十年前的自己，为了不让过去的自己做出那些让自己后悔的事！感觉是文艺版命运石之门。</p>
<h2 id="span-周二-span"><span>周二</span></h2>
<h3 id="灵能百分百">灵能百分百</h3>
<p>ONE 老师另一作品，长得很像琦玉老师的双胞胎弟弟啊，动画肯定也很好看就是了。不多说了快上车吧！</p>
<h3 id="魔装学园h-h">魔装学园H×H</h3>
<p>有着和「恶魔高校DxD」同样结构的名字一眼就能看出其内涵所在了，车已经开了。</p>
<h3 id="禁忌咒文">禁忌咒文</h3>
<p>女主好像我的艾莲啊，而且打斗场面也很炫酷。</p>
<h2 id="span-周三-span"><span>周三</span></h2>
<p>没有，陪女朋友吧。</p>
<h2 id="span-周四-span"><span>周四</span></h2>
<p>没有，去揉女朋友的胸吧。</p>
<h2 id="span-周五-span"><span>周五</span></h2>
<h3 id="弹丸论破3-绝望篇">弹丸论破3 绝望篇</h3>
<p>同之前的理由。</p>
<h3 id="半田君传说">半田君传说</h3>
<p>看介绍像七月的坂本君，不过不是逼王，是衰王 XD</p>
<h3 id="relife">ReLIFE</h3>
<p>尼特族男主吃下 APTX4869 后身体回到 17 岁重新体验高中生活，合法地泡女高中生。</p>
<h2 id="span-周六-span"><span>周六</span></h2>
<h3 id="91days">91Days</h3>
<p>这是个有关复仇的故事（阴暗。</p>
<h3 id="食戟之灵-第二季">食戟之灵 第二季</h3>
<p>药王还有人不知道吗，我喜欢爱丽斯。</p>
<h3 id="时间旅行少女">时间旅行少女</h3>
<p>我喜欢时间穿越类的，比如以前的「穿越时空的少女」。</p>
<h2 id="span-周日-span"><span>周日</span></h2>
<h3 id="情热传说-the-x">情热传说 the X</h3>
<p>ufotable 出品，经费当然不要钱。</p>
<h3 id="days">DAYS</h3>
<p>足球类的动画，看了一集我感觉足球配合相关的刻画还不错，相信会是个很燃的故事。</p>
<h3 id="七大罪-第二季">七大罪 第二季</h3>
<p>只有四集，伊丽莎白粉当成 OVA 看吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本季我在追的新番大概有 12 部之多！是今年前两季（9、8部）所不能比的，不过之前的数据其实有些水分，有些番是我写了推荐之后才开始看的 XD 所以可能不止那个数字。&lt;/p&gt;
&lt;h2 id=&quot;span-周一-span&quot;&gt;&lt;span&gt;周一&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=
    
    </summary>
    
    
      <category term="animes" scheme="https://egoist.moe/tags/animes/"/>
    
  </entry>
  
  <entry>
    <title>第一次恋爱</title>
    <link href="https://egoist.moe/2016/07/01/first-love/"/>
    <id>https://egoist.moe/2016/07/01/first-love/</id>
    <published>2016-07-01T10:50:57.000Z</published>
    <updated>2016-10-02T05:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年七月一日，然而这对我并不是一个有什么意义的日子。</p>
<p>最近我的运气算是差到了极点，未来在牙科七进七出都不是梦了。而每到这种万物于我皆衰败的时候，我总是会纯情地想起她，不同于以往的是，我似乎已经被某些事折腾得累了，也逐渐想明白了一些，我不再讨厌她之前的决定，现在看来一切都是在科学的发展着。</p>
<p>其实高中的时候我便不相信恋爱，同学间的懵懂情愫对我来说可有可无。就像我高中暗恋的她，有男朋友的她很喜欢笑，和男生打成一片，和他也如胶似漆，而我只是默默远观，并且这一切一直都没有改变，我的不存在没有改变任何事，一切都在开心地运转。</p>
<p>话说男生喜欢一个女生最明显的表现就是喜欢和她对着干，很对，我教科书式得对着干让她没有注意到丝毫我对她的感情。</p>
<p>看起来多么悲情和可怜的家伙啊，你以为我是这样？别，我的形象其实可以更高大。</p>
<p>在高三最后半年，突然冒出两个喜欢我的女生，我使劲想了想却记不起她们的名字，至于样貌嘛，我从一开始就不太清楚。</p>
<p>我对她们感到很抱歉，那段时间我的孤独症正值发病期，伴随着即将毕业再也看不见“她”的心情我用这两个女生打发了一段无聊的时光，虽然仅限于网络。</p>
<p>她们还有个身份就是我隔壁班的同学，至于我对她们说“不”后她们夸张的反应，我也表示很遗憾，一切都是我的错。</p>
<p>我之前暗恋的她还有她们似乎占了很大篇幅，其实我真正想说的是我大学的“她”，对，一切都只是引子而已。</p>
<p>要说长相没人会说她很好看，我也不会。可我就是喜欢。我很惭愧我不能夸我喜欢的人好看，不能露出惊为仙女的表情，我只是默默按耐住内心躁动的情绪，要说唯一能想到的形容词，那就是「百看不厌」。</p>
<p>多么可笑的故事开局，所谓「百看不厌」是一种喜欢吗，我完全不知道。不过我很庆幸她有所回应，或者更客观地说是「没有拒绝」，就这样我学校生涯最开心的几个月开始了。第一次恋爱我很手足无措，面对她的时候显得很幼稚，虽然也许行为上并没有表现出来，因为我看着比较木讷，但内心其实是在拼命掩盖着。</p>
<p>那是在一年暑期的前几个月，我常常在傍晚约她去操场散步，女生宿舍就在体育场旁边，因此每次我过去都可以看到她在等我。哦不，是我记错了，每次我去的时候她都还没有下楼。不过还好，每次看见她走出宿舍她都在笑，她笑的时候眼睛会显得更小，似乎面部所有部位都在抒发感情。而我和她在操场上最难忘的是两件事，一是她经常用我的手机玩游戏，而我就在旁边看她玩，因为这个我学会了植物大战僵尸；二是某次我和她坐在足球场的球门附近，突然一个不认识的人跑了过来问我要电话号码，事后我才意识到她是和附近的几个人玩真心话大冒险输了，该死。</p>
<p>还有什么值得回忆的事吗，尽管只过了一两年有些事我也记不太清了，不过大部分都可以一句话带过——周末我有时会约她去图书馆看书，玩电脑，刚巧那个时候我们都看《吸血鬼日记》和《行尸走肉》，我就和她在图书馆一起看了一段，然而效果并不理想；她四级考试连挂两次之后我陪她去买习题；周末她会去附近的沃尔玛采购食物，所以有几次我因为这个找借口在周末留在学校，为了能陪她一起去；有次班上一起出去玩，刚巧我每个月有几天心情很不好，我就一个人躺在巴士的最后一排，她和其他人玩得很开心，由于我穿着短裤躺着，不方便揣钥匙，所以我让她帮我拿一下钥匙，计划通，这种感觉挺好……</p>
<p>说了一堆可有可无的小事，只有最后一件是我差点忘了的。那是暑假之前我们最后一天在学校，我收拾好行李准备回家了，忘了什么原因，似乎是刚好顺路，在回家之前我可以陪她坐一段地铁。平淡无奇的事，不过能够看到她「在地铁上的样子」也算某种程度上的「第一次」。之后换乘的时候我们路线相反，因此分道扬镳了。再出了地铁口之后，天上下起了蒙蒙细雨，一个路人甲走了过来问能不能买我的伞，我却直接送给了她，怪我毫无预见性，不一会儿小于就变成了十分变态的大雨。回到家之后我告诉了她这件事，我能想象到屏幕那边她的笑脸。</p>
<p>没想到暑假回来，她有了男朋友，是她青梅竹马的高中同学。我甚至忘了我是怎么知道这一事实的，她说她其实一直喜欢他，只是他有女朋友，她是在等。慢着，我是不是听错了，好吧没有。之后的事我就不想再描述了，不过这些「不可描述的事」中有一件是某次我在食堂中央区域吃饭，她牵着男朋友进了食堂，她很明显没注意到我，然后和男朋友走向了二楼。</p>
<p>在那之后的一年里，我都想知道为什么，虽然原因也许根本不重要，我也只是想有个充分的让我放弃的理由。最开始我难以接受，她会这样对我上帝能想到吗，我让自己讨厌她以此来证实她的决定是对的，真可怜啊，从来没有被接受却要承受被拒绝的心情。如果从一开始她就不给我任何回应就好了，不努力考零分和没日没夜学习最后考了 59 分还是后者来的伤害更大。不过能怪她吗，毕竟是同班同学，直接拒绝了我恐怕也很尴尬。</p>
<p>WTF? 似乎最开始我表白才是最大的错?这是我第一次想拥有哆啦A梦。</p>
<hr>
<p>有些人在描述自己「不可描述经历」的时候往往会写出流水账，因为那个时候他们势必会参杂着某些难以抑制的感情，很难像黄健翔那样酒后激情洋洋洒洒脱口而出「……伟大的意大利！伟大的意大利的左后卫！马尔蒂尼，今天生日快乐！意大利万岁！」。</p>
<p>你之所以能看到这样一篇抑扬顿挫的抒情散文，完全是因为我已经拥有了二次元的爱，对那些狗屁的三次元恋爱毫无留恋。</p>
<p><img src="https://o68eee1f9.qnssl.com/16-7-1/26410635.jpg" alt="fuck"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又是一年七月一日，然而这对我并不是一个有什么意义的日子。&lt;/p&gt;
&lt;p&gt;最近我的运气算是差到了极点，未来在牙科七进七出都不是梦了。而每到这种万物于我皆衰败的时候，我总是会纯情地想起她，不同于以往的是，我似乎已经被某些事折腾得累了，也逐渐想明白了一些，我不再讨厌她之前的决定，
    
    </summary>
    
      <category term="life" scheme="https://egoist.moe/categories/life/"/>
    
    
      <category term="love" scheme="https://egoist.moe/tags/love/"/>
    
      <category term="shangjiamin" scheme="https://egoist.moe/tags/shangjiamin/"/>
    
  </entry>
  
  <entry>
    <title>死宅什么的最好了</title>
    <link href="https://egoist.moe/2016/06/23/otaku-is-the-best/"/>
    <id>https://egoist.moe/2016/06/23/otaku-is-the-best/</id>
    <published>2016-06-23T08:02:49.000Z</published>
    <updated>2016-10-01T17:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>相比「死宅什么的最好了」这种论调，更常见的是「死宅什么的最恶心了」，真的是这样吗？那我们先来看看:</p>
<p><img src="https://o68eee1f9.qnssl.com/16-6-23/23095294.jpg" alt="1"></p>
<p>相信各位客官都看到了，这是何等变态的言论啊！</p>
<p>幸好似乎出现了主持正义的民众:</p>
<p><img src="https://o68eee1f9.qnssl.com/16-6-23/9021550.jpg" alt="2"></p>
<p>什么？我搞错了，是的，这是何等的无耻啊，这个死宅居然说自己是我女朋友的老公！</p>
<hr>
<p>相信到这里各位拥有忍者动态视力的客官已经看清楚了，死宅什么的就是不分青红皂白自称是我女朋友的老公的那一类人，该杀！</p>
<h2 id="span-剧情反转-span"><span>剧情反转</span></h2>
<p>我察觉到有些不对，表达对我女朋友的向往有什么不对吗，死宅的这种精神反而值得钦佩，明知道事实不会因为自己的意淫而得到任何改变。</p>
<p>这种精神除了刚出生的婴儿和精神病院的智障以外，上帝只给了死宅。</p>
<p>南无三，这是何等的珍贵啊！</p>
<p><em>开什么玩笑啊喂！</em>&lt;(｀^´)&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相比「死宅什么的最好了」这种论调，更常见的是「死宅什么的最恶心了」，真的是这样吗？那我们先来看看:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o68eee1f9.qnssl.com/16-6-23/23095294.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;相信各位
    
    </summary>
    
      <category term="anime" scheme="https://egoist.moe/categories/anime/"/>
    
    
      <category term="otaku" scheme="https://egoist.moe/tags/otaku/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL 简明指南</title>
    <link href="https://egoist.moe/2016/04/25/postgresql-simple-guide/"/>
    <id>https://egoist.moe/2016/04/25/postgresql-simple-guide/</id>
    <published>2016-04-25T09:06:05.000Z</published>
    <updated>2016-10-01T17:21:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>边学边记录，有错请指出。（Keep Updating…）</p>
<h2 id="span-基础-span"><span>基础</span></h2>
<h3 id="安装">安装</h3>
<p><code>postgresql-contrib</code> 不是必需的，它提供一些额外的功能。</p>
<pre><code class="language-bash">$ sudo apt-get update
$ sudo apt-get install postgresql postgresql-contrib
</code></pre>
<p>安装完成后，它会自动在你的系统上新建一个叫 <code>postgres</code> 的用户，之后你需要切换过去来使用 <code>PostgreSQL</code>:</p>
<pre><code class="language-bash">$ sudo -i -u postgres
</code></pre>
<p>进入交互模式:</p>
<pre><code class="language-bash">$ psql
# 想退出则输入 `\q`
</code></pre>
<h3 id="初始化">初始化</h3>
<p>用默认账户登录到默认数据库:</p>
<pre><code class="language-bash">$ sudo -u postgres psql template1
</code></pre>
<p>修改默认账户的密码:</p>
<pre><code class="language-sql">$ postgres=# ALTER USER postgres with encrypted password 'xxxxxxx';
</code></pre>
<p>然后修改 <code>pg_hba.conf</code> 让其用 <code>md5</code> 方式加密:</p>
<pre><code class="language-bash"># 9.1 是版本号
$ sudo vim /etc/postgresql/9.1/main/pg_hba.conf
</code></pre>
<p>这样修改: local      all     postgres     <s>peer</s> md5</p>
<p>重启数据库:</p>
<pre><code class="language-bash">$ sudo /etc/init.d/postgresql restart
</code></pre>
<h3 id="新建用户和数据库">新建用户和数据库</h3>
<p>在默认的 Linux 账户 <code>postgres</code> 下，你可以创建创建一个新的用户:</p>
<pre><code class="language-sql">$ postgres=# CREATE USER egoist WITH PASSWORD 'your_password';
</code></pre>
<p>下一步是创建一个数据库，并让指定用户据有读写权限:</p>
<pre><code class="language-sql">$ postgres=# CREATE DATABASE database_a;
</code></pre>
<p>之后给予数据库 <code>database_a</code> 的权限到用户 <code>egoist</code>:</p>
<pre><code class="language-sql">$ postgres=# GRANT ALL PRIVILEGES ON DATABASE database_a to egoist;
</code></pre>
<h3 id="数据库相关查询">数据库相关查询</h3>
<h4 id="列出所有数据库">列出所有数据库</h4>
<pre><code class="language-bash"># 当前用户
# \l 或者 \list
$ user=# \list

# 非 psql 交互模式下
$ psql -U username -l
</code></pre>
<h2 id="span-推荐阅读-span"><span>推荐阅读</span></h2>
<ul>
<li><a href="http://postgresguide.com" target="_blank" rel="external">PostgreSQL Guide</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;边学边记录，有错请指出。（Keep Updating…）&lt;/p&gt;
&lt;h2 id=&quot;span-基础-span&quot;&gt;&lt;span&gt;基础&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;postgresql-contrib&lt;/code&gt; 不是必需的，
    
    </summary>
    
    
      <category term="postgresql" scheme="https://egoist.moe/tags/postgresql/"/>
    
      <category term="database" scheme="https://egoist.moe/tags/database/"/>
    
  </entry>
  
</feed>
