{"tags":[{"name":"git","permalink":"https://egoistian.com/tags/git/","url":"/async/tags/git.json","count":2},{"name":"udo","permalink":"https://egoistian.com/tags/udo/","url":"/async/tags/udo.json","count":1}],"categories":[{"name":"git","permalink":"https://egoistian.com/categories/git/","url":"/async/categories/git.json","count":2}],"url":"/async/posts/2015/10/04/how-to-undo-with-git.json","date":1443939359000,"path":{"year":2015,"month":10,"day":4,"name":"how-to-undo-with-git"},"title":"如何在 Git 中使用撤消操作","permalink":"https://egoistian.com/2015/10/04/how-to-undo-with-git/","content":"<p>版本控制系统的一个好处就是你可以轻易地撤销之前错误的操作。</p>\n<p>当你用 <code>git commit</code> 提交了一个新的更改后 git 会将当时的文件内容暂时保存下来，之后你就可以用 git 随意回滚到任意一个版本。</p>\n<p>这篇文章会介绍一些常见的可能用到撤销 <code>undo</code> 操作的情况。</p>\n<h2 id=\"span-撤销一个已发布的更新-span\"><span>撤销一个已发布的更新</span></h2>\n<p><strong>情景</strong>: 你已经用 <code>git push</code> 将代码提交到了 GitHub，然后你意识到这其中的一个 commit 有错误，于是你想撤销那个 commit。</p>\n<p><strong>操作</strong>: <code>git revert &lt;SHA&gt;</code></p>\n<p><strong>效果</strong>: git 会新建一个新的 commit 来执行提供的 <sha> 对应 commit 的相反的更改，任何在该旧 commit 中删除的内容将会在新 commit 中添加进去，反之亦然。</sha></p>\n<p>这是 git 里最安全的撤消操作的办法，因为这不会影响你的提交历史。于是现在你可以提交新的 commit 去撤销之前错误的操作了。</p>\n<h2 id=\"span-修改上次-commit-的提交信息-span\"><span>修改上次 commit 的提交信息</span></h2>\n<p><strong>情景</strong>: 你在上次 commit 提交信息中打错了一个单词，比如你执行了 <code>git commit -m &quot;fxied bug #42&quot;</code> 然后你意识到应该是 <code>fixed bug #42</code>。</p>\n<p><strong>操作</strong>: <code>git commit --amend</code> 或 <code>git commit --amend -m &quot;Fixes bug #42&quot;</code></p>\n<p><strong>效果</strong>: <code>git commit --amend</code> 结合最新的文件修改情况和上一次提交信息更新并替换上一次提交。没有新的文件更改就直接覆盖上次提交。</p>\n<h2 id=\"span-撤销本地修改-span\"><span>撤销本地修改</span></h2>\n<p><strong>情景</strong>: 你家的喵星人跑到你的键盘上装逼用双爪打字然后不知怎么还点了保存，然后编辑器还崩溃了，你还没有 commit 这只猫做的修改，你想撤销那个文件里被猫修改的内容。</p>\n<p><strong>操作</strong>: <code>git checkout -- &lt;bad filename&gt;</code></p>\n<p><strong>效果</strong>: <code>git checkout</code> 会将该文件的内容恢复到上一次 git commit 的状态。你可以提供一个分支名称或者直接提供要回到的 SHA。</p>\n<p>请记住，这种方法作出的撤销是彻底的，这些内容不会被 commit 所以之后你并不能再用 git 恢复这些内容。</p>\n<h2 id=\"span-重置本地修改-span\"><span>重置本地修改</span></h2>\n<p><strong>情景</strong>: 你在本地 commit 了一些内容（并没有 push），但是你搞错了，你想撤销最近这三个 commit，就像让它们从来不存在那样。</p>\n<p><strong>操作</strong>: <code>git reset &lt;last good SHA&gt;</code> 或 <code>git reset --hard &lt;last good SHA&gt;</code></p>\n<p><strong>效果</strong>: <code>git reset</code> 会让你的 git 历史会退到你指定的 SHA 的状态。这些 commit 不存在了但是你硬盘上的这些文件还是维持在被修改了的状态，这是最安全的做法。但是有时你也想同时撤销硬盘上的修改，这时加上 <code>--hard</code> 就会很有用。</p>\n<h2 id=\"span-撤销本地修改之后重做-span\"><span>撤销本地修改之后重做</span></h2>\n<p><strong>情景</strong>: 你提交了一些 commit，然后执行 <code>git reset --hard</code> 来撤消这些 commit 并清除本地硬盘上的修改。但是最后你意识到你想要回这些 commit！</p>\n<p><strong>操作</strong>: <code>git reflog</code> 和 <code>git reset</code> 或 <code>git checkout</code></p>\n<p><strong>效果</strong>: <code>git reflog</code> 是个修复项目提交历史的好方法。你可以找回几乎所有内容 —— 所有你 commit 过的内容 —— 用 reflog 就行。</p>\n<p>你可能对 <code>git log</code> 很熟悉，这个操作会列出你的 git 提交历史。<code>git reflog</code> 很像它，但是列出的是 <code>HEAD</code> 修改的时间。</p>\n<p>一些说明:</p>\n<ul>\n<li><code>HEAD</code> 修改。在切换分支时 <code>HEAD</code> 会被修改，用 commit 保存修改然后用 reset 撤消修改。但是在你 <code>git checkout -- &lt;bad filename&gt;</code> 时并不会被修改，就像上面说过的那样，这些修改不会被 commit，所以 <code>git reflog</code> 也不能帮你找回这些内容。</li>\n<li><code>git reflog</code> 不是永远有用的。git 会定期清理那些无法追溯的内容。不要期望能用 <code>git reflog</code> 找回一个多月以前的内容。</li>\n<li>你的 <code>git reflog</code> 仅对你有用。你不能用 <code>git reflog</code> 来找回其他人 commit 的修改。</li>\n</ul>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png\" alt=\"reflog\"></p>\n<p>然后…接下来怎么做才能撤销之前的撤销？这取决你到你要干什么:</p>\n<ul>\n<li>如果你想回到一个特定的时间，用 <code>git reset --hard &lt;SHA&gt;</code>。</li>\n<li>如果你想在不修改提交历史的情况下找回那些文件并作为新文件保存，用 <code>git checkout &lt;SHA&gt; -- &lt;filename&gt;</code>。</li>\n<li>如果你想使其中一个 commit 回到你的项目历史中，用 <code>git cherry-pick &lt;SHA&gt;</code>。</li>\n</ul>\n<h2 id=\"span-提交到了另一个分支-span\"><span>提交到了另一个分支</span></h2>\n<p><strong>情景</strong>: 你提交了一些 commits，然后意识到你当前是在 master 分支上，而你其实是想提交到一个 <code>feature</code> 分支上。</p>\n<p><strong>操作</strong>: <code>git branch feature</code>, <code>git reset --hard origin/master</code>, 和 <code>git checkout feature</code></p>\n<p><strong>效果</strong>: 你可能常常使用 <code>git checkout -b &lt;name&gt;</code> 操作来检出一个新分支，这是一个很方便的创建新分支的操作，但是你并不想同时切换到那个分支上。现在使用 <code>git branch feature</code> 既可以创建一个 <code>feature</code> 新分支并且不会切换到那个分支，同时该分支会指向你当前分支最新的一个 commit。</p>\n<p>下一步，用 <code>git reset --hard</code> 去恢复 <code>master</code> 分支到 <code>origin/master</code> 的状态。</p>\n<p>最后，<code>git checkout</code> 到你的 <code>feature</code> 分支，你能看到所有的更改。</p>\n<h2 id=\"span-覆盖整个分支-span\"><span>覆盖整个分支</span></h2>\n<p><strong>情景</strong>: 你基于 <code>master</code> 分支创建了 <code>feature</code> 分支，但是 <code>master</code> 分支远远落后 <code>origin/master</code> 的更改。现在 <code>master</code> 分支和 <code>origin/master</code> 同步了，你想马上同步到 <code>feature</code> 分支，还不是再次远远落后。</p>\n<p><strong>操作</strong>: <code>git checkout feature</code> 和 <code>git rebase master</code></p>\n<p><strong>效果</strong>: 你可能知道用 <code>git reset</code> 然后重新 commit 来达到类似效果，不过那样会丢失 commit 历史。</p>\n<hr>\n<p>本文乃原文常用部分译文: <a href=\"https://github.com/blog/2019-how-to-undo-almost-anything-with-git\" target=\"_blank\" rel=\"external\">How to undo (almost) anything with Git</a> —— 作者: <a href=\"https://github.com/jaw6\" target=\"_blank\" rel=\"external\">jaw6</a></p>\n"}