{"tags":[{"name":"javascript","permalink":"https://egoist.moe/tags/javascript/","url":"/async/tags/javascript.json","count":7}],"categories":[{"name":"javascript","permalink":"https://egoist.moe/categories/javascript/","url":"/async/categories/javascript.json","count":1}],"url":"/async/posts/2015/12/13/how-does-array-slice-call-arguments-work.json","date":1450017570000,"path":{"year":2015,"month":12,"day":13,"name":"how-does-array-slice-call-arguments-work"},"title":"[].slice.call(arguments) 是如何工作的","permalink":"https://egoist.moe/2015/12/13/how-does-array-slice-call-arguments-work/","content":"<p>首先 <code>.slice</code> 这个方法在不接受任何参数的时候会返回 <code>this</code> 本身，这是一个 <code>Array.prototype</code> 下的方法，因此 <code>this</code> 就是指向调用 <code>.slice</code> 方法的数组本身。</p>\n<p><code>arguments</code> 是什么? <code>arguments</code> 是属于函数内部的变量，其值是函数参数列表，一个类数组对象:</p>\n<pre><code class=\"language-JavaScript\">function foo () {\n  console.log(arguments)\n}\nfoo ('hello', 'world')\n// output:\n{\n  '0': 'hello',\n  '1': 'world'\n}\n</code></pre>\n<p>类数组对象可以像真正的数组对象一样操作，除了没有 length 属性，但这足以让 <code>.slice</code> 方法识别了。</p>\n<p>你不可能用 <code>arguments.slice()</code> 这样的形式调用，因为 <code>arguments</code> 本身还是一个非数组对象，只是像数组。这个时候你想到了 <code>.call</code> 方法，这个方法让你可以自定义调用函数的内部 this 指向哪里，之前说过，默认是指向调用这个函数的对象。</p>\n<pre><code class=\"language-JavaScript\">Array.prototype.slice.call(arguments)\n// output:\n['hello', 'world']\n</code></pre>\n<p>这样你就得到了一个真正的参数数组了，而 <code>.slice</code> 除了通过 <code>Array.prototype</code> 访问当然还可以通过对象直接量访问:</p>\n<pre><code class=\"language-JavaScript\">[].slice.call(arguments)\n</code></pre>\n"}