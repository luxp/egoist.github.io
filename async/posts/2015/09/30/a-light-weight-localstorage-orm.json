{"tags":[{"name":"localStorage","permalink":"https://egoist.moe/tags/localStorage/","url":"/async/tags/localStorage.json","count":1}],"categories":[{"name":"JavaScript","permalink":"https://egoist.moe/categories/JavaScript/","url":"/async/categories/JavaScript.json","count":1}],"url":"/async/posts/2015/09/30/a-light-weight-localstorage-orm.json","date":1443588963000,"path":{"year":2015,"month":9,"day":30,"name":"a-light-weight-localstorage-orm"},"title":"一个简单的 localStorage 扩展实现","permalink":"https://egoist.moe/2015/09/30/a-light-weight-localstorage-orm/","content":"<p>之前做了一个类似 <code>localStorage</code> 的 <code>orm</code> 之类的东西，可以让你简单地像操作数据库一样地操作 <code>localStorage</code>。因为打算做个记事本之类的应用需要在本地储存笔记并方便的进行查询所以建立了这个库。</p>\n<p>你可以简单地预览一下：</p>\n<pre><code class=\"language-javascript\">// localdb 会自动为新插入的 collcetion 生成 `_id`、`index` 和 `createdAt` \n// 以及 `updatedAt`\n// `_id` 是类似 MongoDB 的 objectId\nvar User = new localdb('User', 'Array', true)\n\nvar users = [{\n  username: 'kevin',\n  age: 16\n}, {\n  username: 'joe',\n  age: 19\n}, {\n  username: 'zchan',\n  age: 12\n}]\n\nvar opts = {\n  sort: 1,\n  sortBy: 'age'\n}\nvar users_fetched = User.override(users, true).find(null, opts)\n\nconsole.log(JSON.stringify(users_fetched, null, 2))\n</code></pre>\n<p>这样就能按照 <code>age</code> 递增输出这样的结果:</p>\n<pre><code class=\"language-json\">[\n  {\n    &quot;username&quot;: &quot;zchan&quot;,\n    &quot;age&quot;: 12,\n    &quot;index&quot;: 2,\n    &quot;_id&quot;: &quot;560b780cfac748a940e57438&quot;,\n    &quot;createdAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;,\n    &quot;updatedAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;\n  },\n  {\n    &quot;username&quot;: &quot;kevin&quot;,\n    &quot;age&quot;: 16,\n    &quot;index&quot;: 0,\n    &quot;_id&quot;: &quot;560b780ca4833a2e978efcb2&quot;,\n    &quot;createdAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;,\n    &quot;updatedAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;\n  },\n  {\n    &quot;username&quot;: &quot;joe&quot;,\n    &quot;age&quot;: 19,\n    &quot;index&quot;: 1,\n    &quot;_id&quot;: &quot;560b780c1d6c1f81ca7bf2e9&quot;,\n    &quot;createdAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;,\n    &quot;updatedAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;\n  }\n]\n</code></pre>\n<p>如果你想查询 <code>username</code> 为 <code>zchan</code> 的用户:</p>\n<pre><code class=\"language-javascript\">var query = {\n  username: 'zchan'\n}\n\nvar zchan = User.findOne(query)\n\nconsole.log(JSON.stringify(zchan, null, 2))\n</code></pre>\n<p>这样就查询并返回了一个对象:</p>\n<pre><code class=\"language-json\">{\n  &quot;username&quot;: &quot;zchan&quot;,\n  &quot;age&quot;: 12,\n  &quot;index&quot;: 2,\n  &quot;_id&quot;: &quot;560b780cfac748a940e57438&quot;,\n  &quot;createdAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;,\n  &quot;updatedAt&quot;: &quot;2015-09-30T05:50:04.156Z&quot;\n}\n</code></pre>\n<p><code>.find</code> 和 <code>.findOne</code> 类似不过不限制数量且可以进行排序、分页查询等操作。</p>\n<p>甚至支持了 MongoDB 的 <code>populate</code> 特性，不过暂时只能查询一层嵌套:</p>\n<pre><code class=\"language-javascript\">// populate another class, eg: your Post have a Author field\nconst Post = new localdb('Post', 'Array')\nconst User = new localdb('User', 'Array')\n\n// you should have the Author's objectId to create an instance of that class\nconst author = User.extend('some_object_id')\n\nPost.add({\n  title: 'mt post title',\n  author: author\n})\n\n// then you can populate that field before .find or .findOne\nPost.populate('author').findOne()\n</code></pre>\n<hr>\n<p>更详细的使用可以参考这个用 Vue 和 LocalDB <a href=\"http://output.jsbin.com/titeve\" target=\"_blank\" rel=\"external\">TodoMVC</a> 演示和 <a href=\"https://egoist.github.io/localdb/\" target=\"_blank\" rel=\"external\">API</a>。</p>\n"}