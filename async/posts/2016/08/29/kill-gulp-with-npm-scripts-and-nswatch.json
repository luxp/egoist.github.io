{"tags":[{"name":"gulp","permalink":"https://egoist.moe/tags/gulp/","url":"/async/tags/gulp.json","count":1},{"name":"npm","permalink":"https://egoist.moe/tags/npm/","url":"/async/tags/npm.json","count":1}],"categories":[],"url":"/async/posts/2016/08/29/kill-gulp-with-npm-scripts-and-nswatch.json","date":1472460870000,"path":{"year":2016,"month":8,"day":29,"name":"kill-gulp-with-npm-scripts-and-nswatch"},"subtitle":"Long live gulp, I use npm script","title":"用 npm scripts 和 nswatch 替代 gulp","permalink":"https://egoist.moe/2016/08/29/kill-gulp-with-npm-scripts-and-nswatch/","content":"<h2 id=\"span-为什么用-npm-scripts-span\"><span>为什么用 npm scripts ?</span></h2>\n<p>首先我觉得  <a href=\"https://medium.freecodecamp.com/why-i-left-gulp-and-grunt-for-npm-scripts-3d6853dd22b8#.8wsejnq0u\" target=\"_blank\" rel=\"external\">Why I Left Gulp and Grunt for npm Scripts</a> 里说的不用 gulp 的理由基本没有道理:</p>\n<ol>\n<li>gulp 插件质量、数量和实时性</li>\n</ol>\n<p>作者抱怨 gulp 插件的质量取决于插件作者，这可以理解，<strong>但是 npm 的包同样取决于作者啊</strong>。</p>\n<p>作者抱怨 gulp 插件的数量不如 npm，<strong>这不是废话吗</strong>。</p>\n<p>作者抱怨 gulp 插件不能及时更新，比如 babel 6 升级了 gulp-babel 并没有立刻升级。<strong>又不是看直播，干嘛实时?</strong></p>\n<ol start=\"2\">\n<li>debug 很痛苦，gulp crash 掉是因为某个插件吗还是因为版本问题</li>\n</ol>\n<p>额，难道直接用 npm package 就没有这些问题吗。</p>\n<ol start=\"3\">\n<li>不连贯的文档，比如 gulp-eslint 和 eslint，eslint 的文档就是 gulp 插件的文档好得多</li>\n</ol>\n<p>这不又是废话吗，写个插件还要把用的包的文档重新写一遍?</p>\n<hr>\n<p>好了，原文挑剔 gulp 的理由全被扳倒了，但是其中支持 npm 的理由倒是挺有道理:</p>\n<ol>\n<li>npm scripts 并不需要你很擅长命令行操作</li>\n</ol>\n<p>你并不需要在 npm scripts 里用一些很高深的命令行，很多 unix 命令是需要花很长时间学习的。像类似 rm -rf 之类的命令很容易掌握，而且也有相应的 npm 包 <a href=\"https://github.com/isaacs/rimraf\" target=\"_blank\" rel=\"external\">rimraf</a> 让你使用，且跨平台支持。</p>\n<ol start=\"2\">\n<li>npm scripts 不够强大吗?</li>\n</ol>\n<pre><code class=\"language-JSON\">{\n  &quot;scripts&quot;: {\n    &quot;clean&quot;: &quot;rimraf ./dist &amp;&amp; mkdir dist&quot;,\n    &quot;prebuild&quot;: &quot;npm run clean&quot;,\n    &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack&quot;\n  }\n}\n</code></pre>\n<p>npm scripts 甚至支持 <code>pre</code> <code>post</code> 这些 hook 让你在相应的一个 task 之前和之后调用。</p>\n<p>你可以直接执行一个文件来完成相应的构建工作，这让你几乎能做任何 gulp 能做的事:</p>\n<pre><code class=\"language-JSON\">{\n  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;node build.js&quot;\n  }\n}\n</code></pre>\n<ol start=\"3\">\n<li>npm scripts 不是跨平台的</li>\n</ol>\n<p>因为你可能会在 npm scripts 里用一些 unix 命令，解决方案有很多，比如用 npm 包替代这些命令。</p>\n<ol start=\"4\">\n<li>可维护性</li>\n</ol>\n<p>gulp tasks 也多了以后会变得很难维护，npm scripts 也是。解决方案是推荐写精简的 script，比如一个 script 只干一件事。或者很长很复杂的话你就需要专门放到一个 JS 文件里然后再在 npm scripts 里调用了。</p>\n<h2 id=\"span-nswatch-span\"><span>nswatch</span></h2>\n<blockquote>\n<p><a href=\"https://github.com/egoist/nswatch\" target=\"_blank\" rel=\"external\">https://github.com/egoist/nswatch</a></p>\n</blockquote>\n<p>在 npm scripts 里只执行一个构建任务你可能不需要类似 <code>gulp.watch</code> 这样的功能，因为大部分构建工具都自带了 watch 功能，比如 <code>webpack --watch</code> 和 <code>rollup --watch</code>，但是排除这种情况在构建多个任务的时候就不方便了。</p>\n<p>比如你要同时用一些 <code>.jade</code> <code>.css</code> <code>.js</code> 这些文件分别编译成 <code>.html</code> <code>.css</code> <code>.js</code> 文件，开发的时候怎么搞啊，怎么 watch 这些文件然后执行 rebuild 呢？好吧，你又想到了 <code>gulp</code> 😂</p>\n<p>不过现在有 <code>nswatch</code> 了，为了解决类似的需求我今早洗澡之后写的。和 <code>gulp.watch</code> 类似，监听一些文件，不过这里是执行相应的 npm script。</p>\n<p>你的 npm scripts:</p>\n<pre><code class=\"language-JSON\">{\n  &quot;scripts&quot;: {\n    &quot;build:js&quot;: &quot;node scripts/build js&quot;,\n    &quot;build:html&quot;: &quot;node script/build html&quot;,\n    &quot;build:css&quot;: &quot;node scripts/build css&quot;\n  }\n}\n</code></pre>\n<p>然后你可以在 <code>scripts/build.js</code> 里用你喜欢的 npm 包，比如 rollup, jade, postcss，来编译相应文件。</p>\n<p>最后添加 <code>nswatch</code>:</p>\n<pre><code class=\"language-JSON\">{\n  &quot;scripts&quot;: {\n    &quot;watch&quot;: &quot;nswatch src/*.js --script build:js &amp; nswatch src/*.css --script build:css  &amp; nswatch src/*.jade --script build:html &quot;\n  }\n}\n</code></pre>\n<p>由于有三个任务所以写得很长，你可以把它放进单独文件 <code>scripts/watch.js</code>:</p>\n<pre><code class=\"language-JavaScript\">const watch = require('nswatch')\n\nwatch('./src/*.js', ['build:js'])\nwatch('./src/*.jade', ['build:html'])\nwatch('./src/*.css', ['build:css'])\n</code></pre>\n<p>然后执行 <code>node scripts/watch</code> 一切都能运行了！</p>\n<p>最后你可能还是需要把 <code>node scripts/watch</code> 写进 <code>package.json</code>，以后都用 <code>npm run watch</code> 来执行:</p>\n<pre><code class=\"language-JSON\">{\n  &quot;scripts&quot;: {\n    &quot;watch&quot;: &quot;node scripts/watch&quot;\n  }\n}\n</code></pre>\n"}