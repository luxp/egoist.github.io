{"tags":[{"name":"deploy","permalink":"https://egoist.moe/tags/deploy/","url":"/async/tags/deploy.json","count":1},{"name":"node.js","permalink":"https://egoist.moe/tags/node-js/","url":"/async/tags/node.js.json","count":2},{"name":"docker","permalink":"https://egoist.moe/tags/docker/","url":"/async/tags/docker.json","count":1}],"categories":[],"url":"/async/posts/2016/03/23/deploy-node-app.json","date":1458718640000,"path":{"year":2016,"month":3,"day":23,"name":"deploy-node-app"},"subtitle":"你告诉我还能怎么办","title":"如何部署 Node.js 应用","permalink":"https://egoist.moe/2016/03/23/deploy-node-app/","content":"<p>当你熟悉 Node.js 之后很可能会自己写些小东西放在 VPS 上跑，比如说一个个人的 API 服务，或者是你的网站。这篇文章分享的内容不管你的 app 大小，都相对适用，因为我们的原则是「run it forever and deploy it smartly」。</p>\n<h2><span>上传代码</span></h2>\n<p>首先你需要的是把你的 app 代码从本地上传到 VPS，我们不可能用上个世纪的 ftp 方式上传。我们开发的时候用 git 同步本地仓库和远程仓库的代码，你一定有屡试不爽的感觉，同理，这里我们也将使用 git 来操作。</p>\n<p>以下内容都可以用 <a href=\"https://github.com/yyx990803/pod\" target=\"_blank\" rel=\"external\">pod</a> 这个工具来代替，不过相应的你需要用 <a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"external\">PM2</a> 来管理进程。而这里是个相对 general case。</p>\n<p>首先我们确认一下：</p>\n<ul>\n<li><code>/var/repo</code> - 这是 VPS 上存储 git repo 的目录</li>\n<li><code>/var/www</code> - 这是 VPS 的网站目录</li>\n</ul>\n<h3>在 VPS 上创建一个空 repo</h3>\n<pre><code class=\"language-bash\">$ mkdir -p /var/repo/app.git\n$ cd /var/repo/app.git\n$ git init --bare\n</code></pre>\n<p>现在你就拥有了一个只存在版本管理功能，不包含任何 app 源文件的 git 仓库。</p>\n<h3>部署的钩子</h3>\n<p>你需要一个钩子 <code>git hook</code>，也就是在每次本地 git push 之后让它自动把上传的文件拷贝到你的网站目录中。这里我们使用 git 内置的 <code>post-receive</code> 钩子：</p>\n<pre><code class=\"language-bash\">$ cd hooks\n# 写入内容到这个文件\n$ cat &gt; post-receive\n# 回车，输入如下内容：\n</code></pre>\n<pre><code class=\"language-bash\">#!/bin/sh\ngit --work-tree=/var/www/domain.com --git-dir=/var/repo/app.git checkout -f\ncd /var/www/domain.com\nnpm install\n# 这里还可以加一些构建脚本，比如 npm run build\n</code></pre>\n<p>最后，按下 Ctrl+D 来确认保存。</p>\n<p>为了让你有权限执行这个文件，你需要:</p>\n<pre><code class=\"language-bash\">$ chmod +x post-receive\n</code></pre>\n<h3>本地配置</h3>\n<p>退出 VPS：</p>\n<pre><code class=\"language-bash\">$ exit\n</code></pre>\n<p>在你的 app 目录里执行：</p>\n<pre><code class=\"language-bash\">$ git remote add server ssh://user@yourdomain.com/var/repo/app.git\n</code></pre>\n<p>哇哦，搞定了。试着将你的 web app 发布吧，就是简单地提交而已：</p>\n<pre><code class=\"language-bash\">$ git add -A\n$ git commit -m &quot;deploy to server&quot;\n$ git push server master\n</code></pre>\n<p>然后检查一下 <code>/var/www/domain.com</code> 吧，你的代码都被同步过去了。</p>\n<h2><span>持久运行你的 app</span></h2>\n<p>你需要持久化运行你的 app，因为它很可能在高峰时段 crash 掉，同时你也希望在系统重启之后你的 app 也能自动重启。</p>\n<p>你大可参考 <a href=\"http://support.ghost.org/deploying-ghost/#making-ghost-run-forever\" target=\"_blank\" rel=\"external\">Ghost 部署指南</a> 来达到这个目的。非常完整，我就不再赘述，不过我推荐使用 Supervisor。</p>\n<p>你也可以考虑使用 <a href=\"https://nodejs.org/en/docs/guides/nodejs-docker-webapp/\" target=\"_blank\" rel=\"external\">docker</a> 这个更现代(?)的解决方案。</p>\n<h2><span>延伸阅读</span></h2>\n<ul>\n<li><a href=\"https://certsimple.com/blog/deploy-node-on-linux\" target=\"_blank\" rel=\"external\">How to deploy your node app on Linux, 2016 edition</a></li>\n<li><a href=\"https://www.terlici.com/2015/06/20/running-node-forever.html\" target=\"_blank\" rel=\"external\">Running your Node &amp; Express apps forever, no matter what, with Systemd and PM2</a></li>\n<li><a href=\"http://serverfault.com/questions/191331/should-servers-have-their-timezone-set-to-gmt-utc\" target=\"_blank\" rel=\"external\">Should servers have their timezone set to GMT/UTC?</a></li>\n<li><a href=\"https://blog.risingstack.com/operating-node-in-production/\" target=\"_blank\" rel=\"external\">Operating Node.js in Production</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-haproxy-to-set-up-http-load-balancing-on-an-ubuntu-vps\" target=\"_blank\" rel=\"external\">How To Use HAProxy to Set Up HTTP Load Balancing on an Ubuntu VPS</a></li>\n<li><a href=\"https://blog.risingstack.com/node-js-security-tips/\" target=\"_blank\" rel=\"external\">Node.js Security Tips</a></li>\n</ul>\n"}