{"tags":[{"name":"javascript","permalink":"https://egoist.moe/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"node.js","permalink":"https://egoist.moe/tags/node-js/","url":"/async/tags/node.js.json","count":2},{"name":"sindresorhus","permalink":"https://egoist.moe/tags/sindresorhus/","url":"/async/tags/sindresorhus.json","count":1}],"categories":[],"url":"/async/posts/2016/01/29/node-js-module-style-guide.json","date":1454031870000,"path":{"year":2016,"month":1,"day":29,"name":"node-js-module-style-guide"},"subtitle":"编写高质量、可复用的 Node.js 模块","title":"Node.js 模块风格指南","permalink":"https://egoist.moe/2016/01/29/node-js-module-style-guide/","content":"<p>JavaScript 代码一向的特点就是难以维护，保持一个良好的代码、组织风格有助于提升效率、重构代码、添加新功能、单元测试等等。</p>\n<p>我总结了一下写了 200 个 NPM package 之后的一些个人经验和习惯。</p>\n<h2><span>初始化一个项目</span></h2>\n<p>不再使用 <code>npm init</code>。因为除了 <code>package.json</code> 还有一些额外的配置文件，比如 <code>circle.yml</code>、<code>.editorconfig</code>、<code>LICENSE</code> 、<code>README.md</code> 等等。</p>\n<p>使用 <a href=\"http://yeoman.io\" target=\"_blank\" rel=\"external\">yeoman</a>。如果你喜欢在代码中使用分号和用 travis 来测试，推荐 <a href=\"https://github.com/sindresorhus\" target=\"_blank\" rel=\"external\">sindresorhus</a> 用的 <a href=\"https://github.com/sindresorhus/generator-nm\" target=\"_blank\" rel=\"external\">generator-nm</a>。如果你不喜欢分号并且用 circle 来测试，推荐我用的 <a href=\"https://github.com/egoist/generator-esnm\" target=\"_blank\" rel=\"external\">generator-esnm</a>。</p>\n<p>想要定制你的 <a href=\"http://README.md\" target=\"_blank\" rel=\"external\">README.md</a> ? <a href=\"https://github.com/IonicaBizau/blah\" target=\"_blank\" rel=\"external\">blah</a> 可以为你定制生成 <a href=\"http://README.md\" target=\"_blank\" rel=\"external\">README.md</a> 以及更多提升效率的功能。</p>\n<h2><span>注释</span></h2>\n<p>每一个具有单独意义的代码片段前都推荐写注释，就算再简单的代码你隔几天看也不可能一秒看出它在干什么，而有了注释就可以。对于复杂且意义重大的代码尽量写完整的 jsdoc 来说明。</p>\n<p>另一个原因就是这样可以让你的代码显得更格式化，代码挤在一堆很傻且不美观。而且你也可以自动从你代码的 jsdoc 生成 api doc！</p>\n<pre><code class=\"language-js\">/**\t\n * Module dependencies\n */\nconst path = require('path')\n\n/**\n * Reverse array but not change itself\n *\n * @param {Array} names\n * @return {Array}\n */\nfunction rev(names) {\n\treturn names.concat().reverse()\n}\n</code></pre>\n<h2><span>编写可复用模块</span></h2>\n<p>对于一个项目中多次使用（&gt;1）的代码，推荐放入单独的文件作为模块使用。<br>\n对于更为通用的代码尽量打包进一个单独的 npm module 来使用。</p>\n<h2><span>代码风格指南</span></h2>\n<p>对于分号的问题不作讨论，加不加都行。</p>\n<p>对于异步代码，尽量不要使用 callback 而是改成 Promise，并且把 HTTP 请求封装进单独的模块，这样更方便配合 <a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"external\">co</a> 来使用。</p>\n<pre><code class=\"language-js\">// fetchData.js\n// 老式回调风格\nconst request = require('superagent')\n\nmodule.exports = function (callback) {\n\trequest\n\t\t.get('xxx.json')\n\t\t.end((err, res) =&gt; {\n\t\t\tcallback(res)\n\t\t})\n}\n// app.js\n// 调用它\nconst fetchData = require('./fetchData')\n\nmodule.exports = function () {\n\tfetchData(data =&gt; {\n\t\tconsole.log(data)\n\t})\n}\n\n// fetchData.js\n// 无阻塞同步代码风格\nconst fetch = require('node-fetch')\n\nmodule.exports = co.wrap(function* () {\n\tconst data = yield fetch('xxx.json')\n\t\t.then(data =&gt; data.json())\n\treturn data\n})\n// app.js\n// 调用它\nconst fetchData = require('./fetchData')\n\nmodule.exports = co.wrap(function* () {\n\tconst data = yield fetchData()\n\tconsole.log(data)\n})\n</code></pre>\n<p><strong>还使用 co? 不是有 async/await 吗?</strong></p>\n<p>在 async/await 没被 v8 引擎实现之前用 co 都还是第一选择，除非某些情况你使用了 babel 那你可以考虑使用 async/await。不过即使现在用 co 在将来 async/await api 被实现的时候也能轻松地迁移过去。</p>\n<blockquote>\n<p>co is a stepping stone towards ES7 async/await – TJ Holowaychuk</p>\n</blockquote>\n<h2><span>ESLint</span></h2>\n<p>保持良好代码风格的方法之一就是 lint 你的代码，选择你习惯的代码风格，用编辑器实时 lint 或者添加一些 git hook 在 commit 的时候 lint 也可以。</p>\n<p>我目前使用 <a href=\"https://github.com/sindresorhus/xo\" target=\"_blank\" rel=\"external\">xo</a> 来检测代码，它默认无需配置但你可以根据你的喜好调整，基于 ESLint 。如果你喜欢这个风格也可以直接在 ESlint 中使用它的<a href=\"https://github.com/sindresorhus/eslint-config-xo\" target=\"_blank\" rel=\"external\">配置文件</a>。</p>\n<h2><span>测试</span></h2>\n<p>写测试是很有趣的，当且仅当你用 <a href=\"https://github.com/sindresorhus/ava\" target=\"_blank\" rel=\"external\">AVA</a> 的时候。</p>\n<p><img src=\"https://camo.githubusercontent.com/fc55513ee5cb412b2b0d1540032b602ed0142dbe/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f6176612f666531636561316361336432633835313863306363333965633862653539326265616239303535382f6d656469612f6c6f676f2e737667\" alt=\"ava\"></p>\n<p>我使用 AVA 的主要原因是:</p>\n<ul>\n<li>很快</li>\n<li>语法简洁</li>\n<li>内置 ES2015/2016</li>\n<li>many more…</li>\n</ul>\n<h2><span>Commit</span> 风格</h2>\n<p>不使用没有意义的 Commit 信息，比如单纯只写个 <code>fix</code>、<code>update</code>、<code>change</code>。</p>\n<p>尽量描述你干了什么事:</p>\n<pre><code class=\"language-bash\">git commit -m &quot;fix tweak on ie9&quot;\ngit commit -m &quot;release 0.0.1&quot;\ngit commit -m &quot;refactor to use es2015&quot;\ngit commit -m &quot;🔥&quot;\n</code></pre>\n<p>更好的做法是使用 <a href=\"https://github.com/commitizen/cz-cli\" target=\"_blank\" rel=\"external\">commitizen</a> 来规范你的 commit message 格式。</p>\n<p><img src=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\" alt=\"commitizen\"></p>\n<h2><span>Semantic-Release</span></h2>\n<p>发布 NPM 模块是很让人困扰的一步，你需要手动 bump version，需要执行 <code>npm test</code> 来看是否有错，然后再手动执行 <code>npm publish</code>，这些步骤可以被规范且自动化。</p>\n<p>使用 <a href=\"https://github.com/semantic-release/semantic-release\" target=\"_blank\" rel=\"external\">semantic-release</a> 可以自动分析你的 commit message 然后根据这些推测你的代码改动来进行语义化的版本号升级并自动更新 changelog，<a href=\"https://github.com/egoist/tooling/releases\" target=\"_blank\" rel=\"external\">这些</a> 就是自动生成的。</p>\n<h2><span>2016</span></h2>\n<p>200 more modules? Exciting! ✨</p>\n"}