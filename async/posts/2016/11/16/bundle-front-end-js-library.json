{"tags":[{"name":"javascript","permalink":"https://egoist.moe/tags/javascript/","url":"/async/tags/javascript.json","count":7},{"name":"bundle","permalink":"https://egoist.moe/tags/bundle/","url":"/async/tags/bundle.json","count":1},{"name":"bili","permalink":"https://egoist.moe/tags/bili/","url":"/async/tags/bili.json","count":1}],"categories":[],"url":"/async/posts/2016/11/16/bundle-front-end-js-library.json","date":1479282948000,"path":{"year":2016,"month":11,"day":16,"name":"bundle-front-end-js-library"},"title":"优雅地打包前端 JavaScript 库","permalink":"https://egoist.moe/2016/11/16/bundle-front-end-js-library/","content":"<p>打包 JS 库没有打包 Web App 那样复杂，但还是可以变得更简单。</p>\n<h2 id=\"span-常见用例-span\"><span>常见用例</span></h2>\n<p>一个 JS 库一般需要一个 CommonJS 版本，它不会打包 node_modules 里的模块。以及一个 UMD 版本的，用于在浏览器中直接使用，它会打包 node_modules 里的模块。</p>\n<p>使用 <a href=\"https://github.com/universe-denpa/bili\" target=\"_blank\" rel=\"external\">bili</a> 一切都会变得简单，简单到只需要一条命令:</p>\n<pre><code class=\"language-bash\">bili --format cjs --format umd --module-name MyModule\n</code></pre>\n<p>这条命令的意思是打包 <code>./src/index.js</code> 到 <code>./dist</code> 目录，并且转换成 <code>CommonJS</code> 和 <code>UMD</code> 格式的文件，其中 <code>UMD</code> 格式中模块名设定为 <code>MyModule</code>，这样在浏览器中就可以通过全局变量 <code>MyModule</code> 引用。</p>\n<p>如果你同时需要一个压缩后的 UMD 格式文件，直接加上 <code>--compress</code> 参数就能额外得到一个 <code>.min.js</code> 和它的 <code>sourcemap</code> 文件。</p>\n<h2 id=\"span-es2015-span\"><span>ES2015</span></h2>\n<p>打包的一个目的就是使用 Babel 之类的转换器编译 ES next 到 ES5，bili 默认使用 <a href=\"https://buble.surge.sh/guide\" target=\"_blank\" rel=\"external\">buble</a> 来转换 JavaScript 代码，相比 Babel 它更轻量。</p>\n<p>你当然也可以在 bili 中使用 babel 来编译代码，这需要用到 bili 的配置文件 <code>bili.config.js</code>:</p>\n<pre><code class=\"language-js\">module.exports = {\n  jsCompiler: require('rollup-plugin-babel')({\n    presets: ['preset']\n  })\n}\n</code></pre>\n<p>bili 是基于 <a href=\"https://github.com/rollup/rollup\" target=\"_blank\" rel=\"external\">Rollup</a> 的，所以相关 Rollup 插件都可以用来编译 JS 代码。</p>\n<h2 id=\"span-buble-span\"><span>Buble</span></h2>\n<p>正如之前说了，默认我们使用 <code>buble</code>，你可以在配置文件中更改 buble 的配置参数:</p>\n<pre><code class=\"language-js\">module.exports = {\n  buble: {\n    objectAssign: 'objectAssign'\n  }\n}\n</code></pre>\n<p>值得一提的是，buble 不支持 <code>async/await</code> 并且不能将 <code>generator</code> 转换成 ES5 代码，所以我们保留了 generator 代码并且用 <a href=\"https://github.com/leebyron/async-to-gen\" target=\"_blank\" rel=\"external\">async-to-gen</a> 将 <code>async/await</code> 转换到 <code>generator</code>，如果用到了这两个请考虑浏览器兼容性，或者换成 babel 来编译。</p>\n<h2 id=\"span-watch-mode-span\"><span>Watch mode</span></h2>\n<p>在开发的时候编译代码没有 <code>watch</code> 模式会非常痛苦，想开启 bili 的 watch 模式可以直接加上 <code>--watch</code> 参数。</p>\n<h2 id=\"span-更多资料-span\"><span>更多资料</span></h2>\n<p>bili 还内置了一些常用的 Rollup 插件，更多使用方法请参考 bili 的 <a href=\"https://github.com/universe-denpa/bili/wiki\" target=\"_blank\" rel=\"external\">GitHub Wiki</a> 页面。</p>\n"}