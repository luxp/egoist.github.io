{"tags":[],"categories":[],"url":"/async/posts/2017/07/08/bili.json","date":1499497997000,"path":{"year":2017,"month":7,"day":8,"name":"bili"},"subtitle":"基于 Rollup 的打包工具","title":"Bili: 打包 JS 库的瑞士军刀","permalink":"https://egoist.moe/2017/07/08/bili/","content":"<h2 id=\"预习\">预习</h2>\n<h3 id=\"rollup\">Rollup</h3>\n<p><a href=\"https://github.com/rollup/rollup\" target=\"_blank\" rel=\"external\">Rollup</a> 类似 <a href=\"https://webpack.js.org\" target=\"_blank\" rel=\"external\">Webpack</a>/Browserify 之类的打包工具，但是打包出来的文件更小，即便是和 Webpack 3 相比。除此之外 Rollup 主要用于打包 library 并且拥有非常简单的 API 接口。</p>\n<h3 id=\"瑞士军刀\">瑞士军刀</h3>\n<p>多种用途，携带方便且操作简单，意外地看起来很酷。</p>\n<h2 id=\"授业\">授业</h2>\n<blockquote>\n<p>学生 A：道理我都懂，可是 EGOIST sensei! 为什么给 Rollup 套个皮就拿出来卖了？这根本不是编程！</p>\n</blockquote>\n<p>的确这不是什么有难度、有深度的东西，只是用来解决一个简单的问题：简化打包流程，提高人类自身价值感和归属感。</p>\n<blockquote>\n<p>学生 B：哦？是怎么做到的呢，想知道呢！sensei sensei 快告诉我！</p>\n</blockquote>\n<p>既然这个同学可爱地向我提问了那我就简明易懂地告诉大家吧！你可以在 <a href=\"https://github.com/rollup/rollup/wiki/JavaScript-API\" target=\"_blank\" rel=\"external\">WIKI</a> 找到 Rollup 的 API 食用方法，简单地说它接受一个参数，而这个参数决定了如何寻找、操作你的源代码，比如:</p>\n<pre><code class=\"language-js\">rollup.rollup({\n  // 从这个文件开始:\n  entry: 'src/index.js',\n  // 用写插件自定义如何转换代码吧\n  plugins: []\n})\n</code></pre>\n<p>然后它会返回一个 Promise 把 <code>bundle</code> 送到你手上，你可以决定如何生成文件:</p>\n<pre><code class=\"language-js\">rollup.rollup(options)\n  .then(bundle =&gt; {\n    // 我想写到磁盘上！\n    bundle.write({\n      // 等等 Rollup 娘，写成 commonjs 格式的哦！\n      format: 'cjs',\n      // 给生成的文件一个名字吧！\n      dest: 'bundle.js'\n    })\n  })\n</code></pre>\n<blockquote>\n<p>学生 C 跳了起来: EGOIST sensei! 这看上去好简单啊，根本没你的 <a href=\"https://github.com/egoist/bili\" target=\"_blank\" rel=\"external\">Bili</a> 的出场机会了啊 QAQ</p>\n</blockquote>\n<p>的确很简单，但是你可以看看 <a href=\"https://github.com/vuejs/vue/blob/dev/build/build.js\" target=\"_blank\" rel=\"external\">Vue</a> 和 <a href=\"https://github.com/facebook/react/blob/master/scripts/rollup/build.js\" target=\"_blank\" rel=\"external\">React</a> 的构建脚本，真是无比地冗长。</p>\n<p>越 low level 的 API 看起来就越简单，但在大项目中就会被有经验的开发者用更复杂的方式来使用，人们称这种情况为 <strong>M 属性</strong>，不过这已经在这节课的范畴之外了。</p>\n<p>简而言之，大多数项目都会有生成多个 bundle 的需求，比如不同格式的 bundle、抑或替换了不同变量的 bundle，你势必将多次使用 Rollup <strong>简单</strong>的 API 来解决这些需求。而将这一行为抽离出来，放进一个单独的工具中以便重复使用，便是 Bili 干的事:</p>\n<pre><code class=\"language-bash\">bili --format cjs,umd,es --compress umd\n</code></pre>\n<p>为了能尽可能直接用命令行就可以使用 Bili 的全部功能，<code>format</code> 接受以逗号分割的一个或多个格式名，当然数组也可以不过命令行里不太方便。</p>\n<p>让我们来看看使用原汁原味的 Rollup 来写看起来是什么样子:</p>\n<pre><code class=\"language-js\">import { rollup } from 'rollup'\n\nfunction build(format) {\n  const plugins = [\n    // ES2015 -&gt; ES5\n    require('rollup-plugin-buble')()\n  ]\n\n  let compress = false\n\n  if (format.endsWith('Compress')) {\n    format = format.replace(/Compress$/, '')\n    compress = true\n  }\n\n  if (format === 'umd') {\n    // 把第三方模块打包进来\n    plugins.push(\n      require('rollup-plugin-node-resolve')(),\n      require('rollup-plugin-commonjs')()\n    )\n  }\n\n  if (compress) {\n    // 压缩\n    plugins.push(require('rollup-plugin-uglifyjs')())\n  }\n\n  return rollup({\n    entry: 'src/index.js',\n    plugins\n  }, bundle =&gt; bundle.write({\n    dest: `dist/index.${format}.js`,\n    format\n  }))\n}\n\nPromise.all(['umd', 'cjs', 'es', 'umdCompress'].map(build))\n  .then(() =&gt; console.log('done'))\n  .catch(err =&gt; console.error(err))\n</code></pre>\n<p>就是以上这样的感觉，Bili 最近被中国超高校级的计算机协会授予了节能减排倡导先锋和键盘寿命拯救者的光荣称号，以及还有人类脑细胞的救星、键盘手杀手、让正太和萝莉也很容易地打包了这些市井称号。</p>\n<p><a href=\"https://github.com/search?l=JSON&amp;o=desc&amp;q=bili+scripts+build&amp;s=indexed&amp;type=Code&amp;utf8=%E2%9C%93\" target=\"_blank\" rel=\"external\">Bili 被大量使用在我的前端库中</a>，有人会问那 CSS 以及图片、字体什么的怎么办，对于 CSS 我一般不会打包，直接原样交给用户。而字体、图片什么的一般也都是 CSS 里用的，自然同理。当然，我暂时还没有遇到需要字体和图片的情况。</p>\n<h2 id=\"放课后\">放课后</h2>\n<p>放学后同学们都会到家跃跃欲试，打开电脑，发明了 <a href=\"https://github.com/egoist/bili\" target=\"_blank\" rel=\"external\">Bili</a> <a href=\"https://github.com/egoist/bili/releases/tag/v0.17.0\" target=\"_blank\" rel=\"external\">v0.17</a> 的数个 breaking changes，当然都是花一分钟就能搞定的变更。</p>\n<p>从此，大家过让了幸福的打包生活。</p>\n"}